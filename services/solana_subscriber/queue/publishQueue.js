// services/solana_subscriber/queue/publishQueue.js

// ‚úÖ –ì–û–¢–û–í

/**
 * üì§ –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ Redis Stream.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * - –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è `transaction_published`
 * - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ last_signature –≤ –ë–î
 * - –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
 */

import { publishToStream } from '../../../utils/redisStreamBus.js';
import { updateLastSignature } from '../db/subscriptions.js';
import { setPendingUpdate } from './signatureUpdateBuffer.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from '../config/configLoader.js';

// üì¶ –û—á–µ—Ä–µ–¥—å –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á
const queue = [];

// üîÉ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
let isRunning = false;

// üîî –ú–µ—Ö–∞–Ω–∏–∑–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
let resolver = null;
let waitForNewTask = new Promise((res) => {
  resolver = res;
});

/**
 * üì• –°—Ç–∞–≤–∏—Ç –≥–æ—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
export function enqueueTransaction(message) {
  queue.push(message);

  // üõéÔ∏è –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä "—Å–ø–∏—Ç", –±—É–¥–∏–º –µ–≥–æ
  if (resolver) {
    resolver();
    resolver = null;
    waitForNewTask = new Promise((res) => {
      resolver = res;
    });
  }
}

/**
 * üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
 */
export function startPublishQueueWorker() {
  if (isRunning) return;
  isRunning = true;
  workerLoop();
}

/**
 * üîÅ –í–æ—Ä–∫–µ—Ä:
 * - –∂–¥—ë—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
 * - –ø—É–±–ª–∏–∫—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç last_signature
 * - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
 */
async function workerLoop() {
  while (isRunning) {
    const task = queue.shift();

    if (!task) {
      await waitForNewTask; // üí§ –∂–¥—ë–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
      continue;
    }

    try {
      // 1Ô∏è‚É£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
      await publishToStream({
        service: getCurrentConfig().service_name,
        type: 'transaction_published',
        payload: task,
      });

      // 2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
      try {
        await updateLastSignature(task.chain_id, task.account, task.signature);
      } catch (err) {
        setPendingUpdate(task.chain_id, task.account, task.signature);
        await sharedLogger({
          service: getCurrentConfig().service_name,
          level: 'warn',
          message: {
            type: 'update_signature_failed',
            signature: task.signature,
            error: err.message,
          },
        });
      }

      // 3Ô∏è‚É£ –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'info',
        message: {
          type: 'transaction_published',
          signature: task.signature,
          chain_id: task.chain_id,
        },
      });

    } catch (err) {
      // 4Ô∏è‚É£ –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚Üí retry
      queue.push(task);
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'error',
        message: {
          type: 'stream_publish_failed',
          signature: task.signature,
          error: err.message,
        },
      });
    }
  }
}
