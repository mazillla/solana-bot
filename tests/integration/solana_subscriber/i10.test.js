// tests/integration/solana_subscriber/i10.test.js
import { describe, it, expect, beforeEach } from 'vitest';

describe('i10 ‚Äî onLogsQueue –Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–∏–≥–Ω–∞—Ç—É—Ä', () => {
  let enqueueSignature, dequeueSignature, getQueueLength;

  beforeEach(async () => {
    vi.resetModules();
    const queueModule = await import('@/services/solana_subscriber/queue/onLogsQueue.js');
    enqueueSignature = queueModule.enqueueSignature;
    dequeueSignature = queueModule.dequeueSignature;
    getQueueLength = queueModule.getQueueLength;

    // üîÑ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    while (dequeueSignature()) {} // –≤—ã—á–∏—â–∞–µ–º
  });

  it('–Ω–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–∏–≥–Ω–∞—Ç—É—Ä', () => {
    const sig = 'dup123';

    enqueueSignature(sig);
    enqueueSignature(sig); // –¥—É–±–ª–∏–∫–∞—Ç

    expect(getQueueLength()).toBe(1); // ‚úÖ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω

    const dequeued = dequeueSignature();
    expect(dequeued).toBe(sig);

    expect(getQueueLength()).toBe(0); // ‚úÖ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
  });
});
