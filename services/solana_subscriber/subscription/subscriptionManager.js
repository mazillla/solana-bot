// services/solana_subscriber/subscription/subscriptionManager.js

// ‚úÖ –ì–û–¢–û–í

/**
 * üì° –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã Solana.
 *
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç:
 * - –∑–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 * - –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
 * - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
 * - –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –ª–æ–≥–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 */

import { getAvailableRpc } from '../rpc/rpcPool.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { handleLogEvent } from './onLogsHandler.js';
import { recoverTransactions } from './recoveryManager.js';

import {
  getLastSignatureForAccount,
  upsertSubscription,
  deactivateSubscription,
} from '../db/subscriptions.js';

import {
  isPrioritized,
  markAccountAsPrioritized,
} from '../queue/perAccountPublishQueueManager.js';

import { sendSubscriptionStateUpdate } from '../utils/subscriptionStatePublisher.js';
import { getCurrentConfig } from '../config/configLoader.js';

// –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: key = `${chain_id}:${account}` ‚Üí {...}
const activeSubscriptions = new Map();

// –§–ª–∞–≥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
const recoveryInProgress = new Map();

// –ë—É—Ñ–µ—Ä –ª–æ–≥–æ–≤, –ø—Ä–∏—à–µ–¥—à–∏—Ö –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
const bufferedSignatures = new Map();

/**
 * üîÅ –°—Ç–∞—Ä—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ –ë–î
 */
export async function startAllSubscriptions(subscriptionList) {
  for (const sub of subscriptionList) {
    await subscribeToAccount({
      chain_id: sub.chain_id,
      account: sub.account,
      last_signature: sub.last_signature,
      priority: sub.priority === true,
    });
  }
}

/**
 * ‚õî –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 */
export async function stopAllSubscriptions() {
  for (const key of activeSubscriptions.keys()) {
    await unsubscribeFromAccount(key);
  }
}

/**
 * üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
 */
export async function subscribeToAccount({
  chain_id,
  account,
  last_signature = null,
  history_max_age_ms,
  priority = false,
}) {
  const key = `${chain_id}:${account}`;

  if (activeSubscriptions.has(key)) return;

  // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ—Ä–∫–µ—Ä
  if (priority === true) {
    markAccountAsPrioritized(chain_id, account);
  }

  const configHistoryMaxAge = getCurrentConfig().default_history_max_age_ms;
  const effectiveHistoryAge = history_max_age_ms || configHistoryMaxAge;

  // ‚è∫Ô∏è –ó–∞–ø–∏—Å—å –≤ –ë–î
  try {
    await upsertSubscription({
      chain_id,
      account,
      last_signature,
      history_max_age_ms: effectiveHistoryAge,
      priority,
    });
  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'error',
      message: {
        type: 'upsert_subscription_failed',
        chain_id,
        account,
        error: err.message,
      },
    });
    return;
  }

  // üåê RPC WebSocket
  const rpc = await getAvailableRpc();
  if (!rpc) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'warn',
      message: {
        type: 'subscribe_skipped',
        reason: 'no_available_rpc',
        chain_id,
        account,
      },
    });
    return;
  }

  // üßæ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞
  if (!last_signature) {
    last_signature = await getLastSignatureForAccount(chain_id, account);
  }

  recoveryInProgress.set(key, true);
  bufferedSignatures.set(key, []);

  // üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–æ–≥–∏
  const id = rpc.wsConn.onLogs(account, async (logInfo) => {
    if (!logInfo?.signature) return;
    const signature = logInfo.signature;

    if (recoveryInProgress.has(key)) {
      bufferedSignatures.get(key).push(signature);
    } else {
      await handleLogEvent({ chain_id, account, signature, rpc });
    }
  });

  // üíæ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  activeSubscriptions.set(key, {
    chain_id,
    account,
    rpc_id: rpc.id,
    subscriptionId: id,
    wsConn: rpc.wsConn,
    last_signature,
    history_max_age_ms: effectiveHistoryAge,
  });

  // üì¢ –õ–æ–≥
  await sharedLogger({
    service: getCurrentConfig().service_name,
    level: 'info',
    message: {
      type: 'subscribe',
      chain_id,
      account,
      rpc_id: rpc.id,
      priority,
    },
  });

  // üì° Redis
  try {
    await sendSubscriptionStateUpdate({
      chain_id,
      account,
      active: true,
      connected: true,
    });
  } catch (_) {}

  // ‚èÆÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
  try {
    await recoverTransactions({
      chain_id,
      account,
      last_signature,
      history_max_age_ms: effectiveHistoryAge,
    });
  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'error',
      message: {
        type: 'recovery_failed',
        chain_id,
        account,
        error: err.message,
      },
    });
  }

  // üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
  const buffer = bufferedSignatures.get(key) || [];
  for (const signature of buffer) {
    await handleLogEvent({ chain_id, account, signature, rpc });
  }

  recoveryInProgress.delete(key);
  bufferedSignatures.delete(key);

  await sharedLogger({
    service: getCurrentConfig().service_name,
    level: 'info',
    message: {
      type: 'recovery_finished',
      chain_id,
      account,
      buffered_signatures: buffer.length,
    },
  });
}

/**
 * ‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export async function unsubscribeFromAccount(key) {
  const sub = activeSubscriptions.get(key);
  if (!sub) return;

  try {
    await sub.wsConn.removeOnLogsListener(sub.subscriptionId);
  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'warn',
      message: {
        type: 'unsubscribe_failed',
        error: err.message,
        key,
      },
    });
  }

  activeSubscriptions.delete(key);

  const [chain_id, account] = key.split(':');
  await deactivateSubscription({ chain_id, account });

  await sharedLogger({
    service: getCurrentConfig().service_name,
    level: 'info',
    message: {
      type: 'unsubscribe',
      chain_id,
      account,
      rpc_id: sub.rpc_id,
    },
  });

  try {
    await sendSubscriptionStateUpdate({
      chain_id,
      account,
      active: false,
      connected: false,
    });
  } catch (_) {}
}

/**
 * ‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
 */
export async function resubscribeAll() {
  const oldSubs = Array.from(activeSubscriptions.entries());

  await stopAllSubscriptions();
  await publishAllDisconnected();

  for (const [key, sub] of oldSubs) {
    const { chain_id, account, last_signature } = sub;

    try {
      await subscribeToAccount({
        chain_id,
        account,
        last_signature,
        priority: sub.priority === true,
      });

      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'info',
        message: {
          type: 'resubscribe',
          chain_id,
          account,
        },
      });
    } catch (err) {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'error',
        message: {
          type: 'resubscribe_failed',
          chain_id,
          account,
          error: err.message,
        },
      });
    }
  }
}

/**
 * üîÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 */
export async function publishAllDisconnected() {
  for (const key of activeSubscriptions.keys()) {
    const [chain_id, account] = key.split(':');
    try {
      await sendSubscriptionStateUpdate({
        chain_id,
        account,
        active: true,
        connected: false,
      });
    } catch (_) {}
  }
}
