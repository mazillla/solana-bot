// utils/sharedLogger.js

// ‚úÖ –ì–û–¢–û–í (–æ–±–Ω–æ–≤–ª—ë–Ω —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)

// üì¶ Redis-–∫–ª–∏–µ–Ω—Ç (node-redis v4)
import { createClient } from 'redis';

// üß† –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (POSTGRES_URL, REDIS_URL –∏ –¥—Ä.)
import { CONFIG } from './config/index.js';

// üîç –í–∞–ª–∏–¥–∞—Ü–∏—è payload –ø–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
import { isValidPayload } from './isValidPayload.js'; // üëà –Ω–æ–≤–∞—è —É—Ç–∏–ª–∏—Ç–∞

// üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let redis = null;                 // Redis –∫–ª–∏–µ–Ω—Ç
let isConnected = false;         // –§–ª–∞–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const STREAM_KEY = 'logs:stream'; // –ò–º—è Redis Stream, –∫—É–¥–∞ –ø–∏—à—É—Ç—Å—è –ª–æ–≥–∏

/**
 * üì¢ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
 *
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis Stream `logs:stream`.
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ:
 * - Redis —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
 * - –õ–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è
 * - –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback
 *
 * @param {object} options
 * @param {string} options.service - –∏–º—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
 * @param {string} [options.level="info"] - —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞ (info, warn, error)
 * @param {object|string} options.message - —Ç–µ–ª–æ –ª–æ–≥–∞ (–æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
 */
export async function sharedLogger({ service, level = 'info', message }) {
  try {
    // ‚ùå –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø—É—Å—Ç—ã—Ö / –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (
      typeof message !== 'string' &&
      !isValidPayload(message)
    ) {
      await fallbackLogger({
        service,
        level: 'warn',
        message: {
          type: 'shared_logger_invalid_message',
          input: message,
        },
      });
      return;
    }

    // üîå –°–æ–∑–¥–∞—ë–º Redis-–∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    if (!redis) {
      redis = createClient({ url: CONFIG.redis.url });
    }

    // üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ)
    if (!isConnected) {
      await redis.connect();
      isConnected = true;
    }

    // üßæ –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥-–∑–∞–ø–∏—Å—å
    const logEntry = {
      timestamp: new Date().toISOString(),
      service,
      level,
      message,
    };

    // üí° –ü—Ä–æ–±—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
    let jsonData;
    try {
      jsonData = JSON.stringify(logEntry);
    } catch (serializationError) {
      await fallbackLogger({
        service,
        level: 'error',
        message: {
          type: 'shared_logger_serialization_failed',
          error: serializationError.message,
        },
      });
      return;
    }

    // üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Redis Stream
    await redis.xAdd(STREAM_KEY, '*', { data: jsonData });

  } catch (err) {
    // üõë Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Üí fallback
    await fallbackLogger({
      service,
      level: 'warn',
      message: {
        type: 'shared_logger_redis_failed',
        error: err.message,
      },
    });
  }
}

/**
 * üõ† –†–µ–∑–µ—Ä–≤–Ω—ã–π –ª–æ–≥–≥–µ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–±–æ—è—Ö Redis –∏–ª–∏ JSON.stringify)
 *
 * –í—ã–≤–æ–¥–∏—Ç –ª–æ–≥ –≤ stdout –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö.
 */
async function fallbackLogger({ service, level, message }) {
  const safeOutput = {
    timestamp: new Date().toISOString(),
    service,
    level,
    message,
  };

  console.log(`[fallbackLogger]`, JSON.stringify(safeOutput, null, 2));
}
