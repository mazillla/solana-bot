// services/solana_subscriber/config/redisConsumer.js

// ‚úÖ –ì–û–¢–û–í

// üì¶ –†–∞–±–æ—Ç–∞ —Å Redis Stream: –ø–æ–¥–ø–∏—Å–∫–∞, ack, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
import {
  consumeFromStream,
  ackMessage,
  recoverAllPendingMessages,
} from '../../../utils/redisStreamBus.js';

// ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
import {
  subscribeToAccount,
  unsubscribeFromAccount,
  resubscribeAll,
} from '../subscription/subscriptionManager.js';

// üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
import { updateAndReloadConfig } from './configLoader.js';

// üì¢ –û–±—â–∏–π –ª–æ–≥–≥–µ—Ä
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from './configLoader.js';

// ‚öôÔ∏è –û—á–µ—Ä–µ–¥–∏
import {
  stopParseQueueWorker,
  startParseQueueWorker
} from '../queue/parseQueue.js';

// ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è payload
import { validateEvent } from '../../../utils/eventSchemas.js';

const SERVICE_NAME = getCurrentConfig().service_name;

/**
 * üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç Redis Consumer:
 * - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç pending
 * - –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
 */
export async function startRedisConsumer() {
  // üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  await recoverAllPendingMessages({
    consumer: SERVICE_NAME,
    maxPerStream: 1000,
    handler: async ({ type, payload }, meta) => {
      await processRedisCommand(type, payload);
      await ackMessage({ type, id: meta.id, serviceName: SERVICE_NAME });
    }
  });

  // üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥ (–≤—Å–µ —Ç—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö)
  const commandTypes = ['subscribe_command', 'unsubscribe_command', 'config_update_command'];

  for (const type of commandTypes) {
    await consumeFromStream({
      type,
      consumer: SERVICE_NAME,
      handler: async ({ type, payload }, meta) => {
        await processRedisCommand(type, payload);
        await ackMessage({ type, id: meta.id, serviceName: SERVICE_NAME });
      }
    });
  }
}

/**
 * üõë –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –±—É–¥—É—â–µ–µ
 */
export async function stopRedisConsumer() {
  // üîï
}

/**
 * üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ Redis Stream
 */
async function processRedisCommand(type, payload) {
  // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è payload –ø–æ —Å—Ö–µ–º–µ
  const { valid, missingFields } = validateEvent(type, payload);

  if (!valid) {
    await sharedLogger({
      service: SERVICE_NAME,
      level: 'warn',
      message: {
        type: 'invalid_payload',
        event: type,
        missingFields,
        payload,
      },
    });
    return;
  }

  // üì• –õ–æ–≥: –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞
  await sharedLogger({
    service: SERVICE_NAME,
    level: 'info',
    message: { type: `${type}_received`, payload },
  });

  switch (type) {
    /**
     * üìå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
     */
    case 'subscribe_command':
      if (payload.priority === true) {
        try {
          const { markAccountAsPrioritized } = await import('../queue/perAccountPublishQueueManager.js');
          markAccountAsPrioritized(payload.chain_id, payload.account);

          await sharedLogger({
            service: SERVICE_NAME,
            level: 'info',
            message: {
              type: 'subscribe_priority_marked',
              chain_id: payload.chain_id,
              account: payload.account,
            },
          });
        } catch (err) {
          await sharedLogger({
            service: SERVICE_NAME,
            level: 'error',
            message: {
              type: 'subscribe_priority_failed',
              error: err.message,
            },
          });
        }
      }

      await subscribeToAccount({
        chain_id: payload.chain_id,
        account: payload.account,
        last_signature: payload.last_signature,
        history_max_age_ms: payload.history_max_age_ms,
        priority: payload.priority === true,
      });
      break;

    /**
     * üõë –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    case 'unsubscribe_command':
      await unsubscribeFromAccount(`${payload.chain_id}:${payload.account}`);
      break;

    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏
     */
    case 'config_update_command': {
      const { old, updated } = await updateAndReloadConfig();

      if (old.silence_threshold_ms !== updated.silence_threshold_ms) {
        await sharedLogger({
          service: updated.service_name,
          level: 'info',
          message: {
            type: 'silence_threshold_updated',
            from: old.silence_threshold_ms,
            to: updated.silence_threshold_ms,
          },
        });
      }

      if (old.parse_concurrency !== updated.parse_concurrency) {
        stopParseQueueWorker();
        startParseQueueWorker();

        await sharedLogger({
          service: updated.service_name,
          level: 'info',
          message: {
            type: 'parse_queue_concurrency_updated',
            from: old.parse_concurrency,
            to: updated.parse_concurrency,
          },
        });
      }

      const controlsChanged = JSON.stringify(old.control_accounts) !== JSON.stringify(updated.control_accounts);

      if (controlsChanged) {
        await resubscribeAll();

        await sharedLogger({
          service: updated.service_name,
          level: 'info',
          message: {
            type: 'control_accounts_updated',
            old: old.control_accounts,
            new: updated.control_accounts,
          },
        });
      }

      break;
    }
  }
}
