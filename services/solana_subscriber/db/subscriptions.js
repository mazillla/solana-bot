// services/solana_subscriber/db/subscriptions.js

// ‚úÖ –ì–û–¢–û–í

// üì¶ –ò–º–ø–æ—Ä—Ç –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL
import { pool } from './db.js';

// üß† –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è sharedLogger)
import { getCurrentConfig } from '../config/configLoader.js';

// üì¢ –û–±—â–∏–π –ª–æ–≥–≥–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis stream
import { sharedLogger } from '../../../utils/sharedLogger.js';

/**
 * üîÅ –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `subscriptions`.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.
 */
export async function getActiveSubscriptions() {
  const { rows } = await pool.query(`
    SELECT chain_id, account, priority
    FROM subscriptions
    WHERE active = true
  `);

  return rows; // [{ chain_id, account, priority }]
}

/**
 * üíæ –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ `last_signature` –∏ –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ `updated_at`
 * –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (chain_id + account).
 */
export async function updateLastSignature(chain_id, account, signature) {
  await pool.query(
    `
    UPDATE subscriptions
    SET last_signature = $1,
        updated_at = NOW()
    WHERE chain_id = $2 AND account = $3
    `,
    [signature, chain_id, account]
  );
}

/**
 * üßæ –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É (`last_signature`)
 * –¥–ª—è –ø–∞—Ä—ã `chain_id:account`. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.
 */
export async function getLastSignatureForAccount(chain_id, account) {
  const { rows } = await pool.query(
    `
    SELECT last_signature FROM subscriptions
    WHERE chain_id = $1 AND account = $2
    `,
    [chain_id, account]
  );

  return rows[0]?.last_signature || null;
}

/**
 * üîÅ –í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.
 * 
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 * - –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –≤—Å—Ç–∞–≤–∫–∞ (`INSERT`)
 * - –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (`UPDATE`)
 * 
 * –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç `active = true`.
 */
export async function upsertSubscription({
  chain_id,
  account,
  last_signature,
  history_max_age_ms,
  priority
}) {
  try {
    // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const existing = await pool.query(
      `SELECT * FROM subscriptions WHERE chain_id = $1 AND account = $2`,
      [chain_id, account]
    );

    // üü¢ –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    if (existing.rows.length === 0) {
      await pool.query(
        `
        INSERT INTO subscriptions (
          chain_id, account, active, last_signature, history_max_age_ms, priority
        ) VALUES ($1, $2, true, $3, $4, $5)
        `,
        [
          chain_id,
          account,
          last_signature,
          history_max_age_ms,
          priority === true
        ]
      );

      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'info',
        message: {
          type: 'subscription_inserted',
          chain_id,
          account,
          last_signature,
          history_max_age_ms,
          priority: priority === true,
        },
      });

    } else {
      // üü° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
      const updates = [];
      const values = [chain_id, account];
      let paramIndex = 3;

      if (last_signature !== undefined) {
        updates.push(`last_signature = $${paramIndex++}`);
        values.push(last_signature);
      }

      if (history_max_age_ms !== undefined) {
        updates.push(`history_max_age_ms = $${paramIndex++}`);
        values.push(history_max_age_ms);
      }

      if (priority !== undefined) {
        updates.push(`priority = $${paramIndex++}`);
        values.push(priority === true);
      }

      updates.push(`active = true`);
      updates.push(`updated_at = CURRENT_TIMESTAMP`);

      await pool.query(
        `
        UPDATE subscriptions
        SET ${updates.join(', ')}
        WHERE chain_id = $1 AND account = $2
        `,
        values
      );

      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'info',
        message: {
          type: 'subscription_updated',
          chain_id,
          account,
          updated_fields: updates,
        },
      });
    }

  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'error',
      message: {
        type: 'upsert_subscription_failed',
        chain_id,
        account,
        error: err.message,
      },
    });

    throw err;
  }
}

/**
 * üîª –ü–æ–º–µ—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é (active = false).
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.
 */
export async function deactivateSubscription({ chain_id, account }) {
  try {
    await pool.query(
      `
      UPDATE subscriptions
      SET active = false,
          updated_at = NOW()
      WHERE chain_id = $1 AND account = $2
      `,
      [chain_id, account]
    );

    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'info',
      message: {
        type: 'subscription_deactivated',
        chain_id,
        account,
      },
    });

  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'error',
      message: {
        type: 'deactivate_subscription_failed',
        chain_id,
        account,
        error: err.message,
      },
    });

    throw err;
  }
}
