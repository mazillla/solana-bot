// services/solana_subscriber/rpc/rpcUtils.js

// ‚úÖ –ì–û–¢–û–í

/**
 * üì¶ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Solana RPC —á–µ—Ä–µ–∑ web3.js
 *
 * üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–∞–π–º–∞—É—Ç)
 * - –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ RPC –æ—à–∏–±–æ–∫ (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ –∏ rpc_id)
 * - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ `commitment` (—Ç–æ–ª—å–∫–æ –≤ getParsedTransaction)
 */

import { getCurrentConfig } from '../config/configLoader.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { withAbortTimeout } from '../../../utils/withAbortTimeout.js';

/**
 * üîç –ü–æ–ª—É—á–∞–µ—Ç `ParsedTransaction` –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
 *
 * @param {object} rpc - –æ–±—ä–µ–∫—Ç RPC –∏–∑ –ø—É–ª–∞ (httpConn, id –∏ —Ç.–¥.)
 * @param {string} signature - —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (txid)
 * @returns {Promise<ParsedTransaction | null>}
 */
export async function getParsedTransactionWithTimeout(rpc, signature) {
  const config = getCurrentConfig();
  const timeoutMs = config.rpc_timeout_ms || 5000;
  const commitment = config.commitment || 'confirmed';

  try {
    return await withAbortTimeout(async (_signal) => {
      return await rpc.httpConn.getParsedTransaction(signature, {
        commitment,
        maxSupportedTransactionVersion: 0,
      });
    }, timeoutMs);
  } catch (err) {
    try {
      await sharedLogger({
        service: config.service_name,
        level: 'warn',
        message: {
          type: 'rpc_timeout',
          rpc_id: rpc.id,
          method: 'getParsedTransaction',
          signature,
          error: err.message,
        },
      });
    } catch (_) {}
    return null;
  }
}

/**
 * üìú –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞—Ç—É—Ä –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º).
 *
 * @param {object} rpc - RPC-–∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞
 * @param {string | PublicKey} address - –∞–¥—Ä–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞
 * @param {object} options - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: { limit, before, until }
 * @returns {Promise<Array<ConfirmedSignatureInfo> | null>}
 */
export async function getSignaturesForAddressWithTimeout(rpc, address, options = {}) {
  const config = getCurrentConfig();
  const timeoutMs = config.rpc_timeout_ms || 5000;

  try {
    return await withAbortTimeout(async (_signal) => {
      return await rpc.httpConn.getSignaturesForAddress(address, options);
    }, timeoutMs);
  } catch (err) {
    try {
      await sharedLogger({
        service: config.service_name,
        level: 'warn',
        message: {
          type: 'rpc_timeout',
          rpc_id: rpc.id,
          method: 'getSignaturesForAddress',
          address: address.toBase58?.() || address,
          error: err.message,
        },
      });
    } catch (_) {}
    return null;
  }
}
