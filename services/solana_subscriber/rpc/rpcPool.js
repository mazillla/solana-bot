// services/solana_subscriber/rpc/rpcPool.js

// ‚úÖ –ì–û–¢–û–í

/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–ª–æ–º RPC-–∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è Solana.
 *
 * üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
 * - —Ä–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
 * - –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (HTTP –∏ WebSocket)
 * - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */

import { Connection } from '@solana/web3.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from '../config/configLoader.js';
import { sendSubscriptionStateUpdate } from '../utils/subscriptionStatePublisher.js';
import { resubscribeAll } from '../subscription/subscriptionManager.js';
import { createLimiter } from './rpcLimiter.js';

const rpcPool = []; // üß† –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö RPC –∫–ª–∏–µ–Ω—Ç–æ–≤
let reconnectInProgress = false; // üîê —Ñ–ª–∞–≥ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ reconnect

/**
 * ‚öôÔ∏è –°–æ–∑–¥–∞—ë—Ç RPC-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å HTTP –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) WebSocket
 * 
 * @param {string} httpUrl - URL HTTP RPC (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * @param {string|null} wsUrl - URL WebSocket RPC (–µ—Å–ª–∏ –µ—Å—Ç—å)
 * @returns {Connection}
 */
function connectionFactory(httpUrl, wsUrl = null) {
  return new Connection(httpUrl, {
    commitment: 'confirmed',
    ...(wsUrl ? { wsEndpoint: wsUrl } : {}), // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ WS –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
  });
}

/**
 * üîÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ RPC –∫–ª–∏–µ–Ω—Ç–æ–≤.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å–ª–µ —Å–±–æ—è.
 * 
 * @param {Array} endpoints - —Å–ø–∏—Å–æ–∫ RPC-–æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ subscriber_config
 */
export async function initRpcPool(endpoints) {
  rpcPool.length = 0; // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—É–ª

  const {
    http_limit_per_sec = 10,
    ws_limit_per_sec = 5,
  } = getCurrentConfig(); // –ª–∏–º–∏—Ç—ã –∏–∑ –±–∞–∑—ã

  for (let i = 0; i < endpoints.length; i++) {
    const endpoint = endpoints[i];
    const rpcId = `rpc-${i + 1}`;

    // üß∞ –ª–∏–º–∏—Ç–µ—Ä—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç rate limit
    const httpLimiter = createLimiter(http_limit_per_sec);
    const wsLimiter = createLimiter(ws_limit_per_sec);

    // üåê —Å–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const httpConn = connectionFactory(endpoint.http);
    const wsConn = connectionFactory(endpoint.http, endpoint.ws);

    rpcPool.push({
      id: rpcId,
      httpConn,
      wsConn,
      httpLimiter,
      wsLimiter,
    });

    // üì° –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WS
    const ws = wsConn._rpcWebSocket;
    if (ws) {
      ws.rpcId = rpcId;
      ws.on('close', () => handleDisconnect(rpcId));
      ws.on('error', () => handleDisconnect(rpcId));
    }
  }
}

/**
 * üé≤ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π RPC –∫–ª–∏–µ–Ω—Ç.
 * –°–µ–π—á–∞—Å ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π. –ü—Ä–∏ –æ–¥–Ω–æ–º RPC ‚Äî –≤—Å–µ–≥–¥–∞ –æ–Ω.
 */
export function getAvailableRpc() {
  if (!rpcPool.length) return null;
  return rpcPool[Math.floor(Math.random() * rpcPool.length)];
}

/**
 * üìã –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ RPC –∫–ª–∏–µ–Ω—Ç—ã (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
 */
export function getAllRpcClients() {
  return rpcPool;
}

/**
 * üì° –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫)
 */
export function getWsConnections() {
  return rpcPool.map(rpc => rpc.wsConn);
}

/**
 * üßπ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—á–∏—â–∞–µ—Ç –ø—É–ª.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ reconnect –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã.
 */
export async function closeRpcPool() {
  for (const rpc of rpcPool) {
    rpc.httpLimiter?.stop?.();
    rpc.wsLimiter?.stop?.();

    try {
      await rpc.wsConn._rpcWebSocket?.close(); // –∑–∞–∫—Ä—ã–≤–∞–µ–º WS
    } catch (_) {}
  }
  rpcPool.length = 0;
}

/**
 * ‚ôªÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
 * üîê –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ —á–µ—Ä–µ–∑ reconnectInProgress.
 * 
 * - –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * - –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –ø—É–ª
 * - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function handleDisconnect(rpcId) {
  if (reconnectInProgress) {
    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'warn',
        message: {
          type: 'duplicate_disconnect_skipped',
          rpc_id: rpcId,
        },
      });
    } catch (_) {}
    return;
  }

  reconnectInProgress = true;

  try {
    // ‚ö†Ô∏è –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'warn',
      message: {
        type: 'ws_disconnect',
        rpc_id: rpcId,
      },
    });

    // üßπ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ RPC
    await closeRpcPool();

    // üîÅ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
    const { rpc_endpoints } = getCurrentConfig();
    await initRpcPool(rpc_endpoints);

    // ‚ôªÔ∏è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫–∏
    await resubscribeAll();

    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'info',
      message: {
        type: 'reconnect',
        rpc_id: rpcId,
      },
    });

  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'error',
      message: {
        type: 'reconnect_failed',
        rpc_id: rpcId,
        error: err.message,
      },
    });
  } finally {
    reconnectInProgress = false;
  }
}
