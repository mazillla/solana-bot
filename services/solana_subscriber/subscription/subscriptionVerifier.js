// services/solana_subscriber/subscription/subscriptionVerifier.js

/**
 * üß™ –ú–æ–¥—É–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket-–ø–æ–¥–ø–∏—Å–æ–∫.
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ `activeSubscriptions` —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
 * –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ `_rpcWebSocket._subscriptions` –≤ web3.js.
 *
 * –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ ¬´–æ—Ç–≤–∞–ª–∏–ª–∞—Å—å¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –¥–æ—à—ë–ª event 'close'),
 * —Ç–æ:
 * - –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
 * - –ø—Ä–æ–±—É–µ—Ç –∑–∞–Ω–æ–≤–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
 *
 * üîÅ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 60 —Å–µ–∫—É–Ω–¥),
 * –∑–∞–¥–∞—ë—Ç—Å—è –≤ subscriber_config.subscription_verifier_interval_ms.
 */

import { getCurrentConfig } from '../config/configLoader.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import {
  activeSubscriptions,
  unsubscribeFromAccount,
  subscribeToAccount,
} from './subscriptionManager.js';

let verifierInterval = null;

/**
 * üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫
 */
export function startSubscriptionVerifier() {
  const interval = getCurrentConfig().subscription_verifier_interval_ms || 60000;

  verifierInterval = setInterval(async () => {
    for (const [key, sub] of activeSubscriptions.entries()) {
      const { subscriptionId, wsConn, chain_id, account, rpc_id } = sub;

      // üß† –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ ._subscriptions
      const isStillSubscribed =
        wsConn?._rpcWebSocket?._subscriptions?.has(subscriptionId);

      if (!isStillSubscribed) {
        // ‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ "–æ—Ç–≤–∞–ª–∏–ª–∞—Å—å"
        await sharedLogger({
          service: getCurrentConfig().service_name,
          level: 'warn',
          message: {
            type: 'subscription_missing_in_ws',
            chain_id,
            account,
            subscriptionId,
            rpc_id,
          },
        });

        try {
          // ‚ùå –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π (–µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ)
          await unsubscribeFromAccount(key);

          // ‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
          await subscribeToAccount({
            chain_id,
            account,
            last_signature: sub.last_signature,
            priority: sub.priority,
          });

          // ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'info',
            message: {
              type: 'subscription_recovered_after_ws_missing',
              chain_id,
              account,
              rpc_id,
            },
          });
        } catch (err) {
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'error',
            message: {
              type: 'subscription_recovery_failed',
              chain_id,
              account,
              rpc_id,
              error: err.message,
            },
          });
        }
      }
    }
  }, interval);
}

/**
 * üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export function stopSubscriptionVerifier() {
  if (verifierInterval) {
    clearInterval(verifierInterval);
    verifierInterval = null;
  }
}
