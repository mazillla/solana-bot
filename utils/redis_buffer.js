import { createClient } from "redis";
import { logger } from "../utils/logger.js";

const redisClient = createClient();
await redisClient.connect();

// üìå **–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –ø–∞–¥–∞–ª**
process.on("uncaughtException", (err) => {
    logger.error(`[‚ùå] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
});

process.on("unhandledRejection", (reason, promise) => {
    logger.error(`[‚ùå] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –≤ –ø—Ä–æ–º–∏—Å–µ: ${reason}`);
});

// üìå **–û—á–µ—Ä–µ–¥—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**
let messageBuffer = new Map(); // { stream_name: [messages] }

// üìå **–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis Streams —Å —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º**
export async function sendToRedisBuffer(stream, message) {
    try {
        await redisClient.xAdd(stream, "*", { message: JSON.stringify(message) });
    } catch (error) {
        logger.error(`[‚ùå] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis Streams (${stream}): ${error.message}`);
        if (!messageBuffer.has(stream)) {
            messageBuffer.set(stream, []);
        }
        messageBuffer.get(stream).push(message);
    }
}

// üìå **–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Redis**
async function flushBuffer() {
    for (const [stream, messages] of messageBuffer.entries()) {
        while (messages.length > 0) {
            try {
                const message = messages.shift();
                await redisClient.xAdd(stream, "*", { message: JSON.stringify(message) });
            } catch (error) {
                logger.error(`[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis Streams (${stream}): ${error.message}`);
                messages.unshift(message); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
                break; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ Redis –≤—Å—ë –µ—â—ë –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω
            }
        }
        if (messages.length === 0) {
            messageBuffer.delete(stream); // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        }
    }
}

// üìå **–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**
setInterval(async () => {
    try {
        await redisClient.ping(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis
        await flushBuffer();
    } catch (error) {
        logger.error("[‚ö†] Redis –≤—Å—ë –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∂–¥—ë–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...");
    }
}, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

logger.info("[‚úÖ] Redis Buffer –∑–∞–ø—É—â–µ–Ω!");
