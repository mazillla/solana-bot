// @vitest-environment node
import { describe, it, expect, vi } from 'vitest';
import * as postgres from '@/services/solana_subscriber/db/db.js';
import * as logger from '@/utils/sharedLogger.js';
import { start } from '@/services/solana_subscriber/start.js';

describe('D12: Postgres –Ω–µ –ø–æ–¥–Ω—è—Ç ‚Üí —Å–µ—Ä–≤–∏—Å –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ—Ç', () => {
  it('–ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å', async () => {
    const error = new Error('Postgres connection failed');

    // üí• –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Postgres
    vi.spyOn(postgres, 'initPostgres').mockRejectedValue(error);

    const loggerSpy = vi.spyOn(logger, 'sharedLogger').mockResolvedValue();

    // üßº –ü–æ–¥–º–µ–Ω—è–µ–º process.exit, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è —Ç–µ—Å—Ç
    const originalExit = process.exit;
    vi.stubGlobal('process', {
      ...process,
      exit: vi.fn(),
    });

    await start();

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
    expect(loggerSpy).toHaveBeenCalledWith(
      expect.objectContaining({
        service: 'solana_subscriber',
        level: 'error',
        message: expect.stringContaining('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: Postgres connection failed'),
      })
    );

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω process.exit(1)
    expect(process.exit).toHaveBeenCalledWith(1);

    // üîÅ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º process.exit
    global.process.exit = originalExit;
  });
});
