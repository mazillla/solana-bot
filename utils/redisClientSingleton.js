// utils/redisClientSingleton.js

// ‚úÖ –ì–û–¢–û–í (–æ–±–Ω–æ–≤–ª—ë–Ω)

// üì¶ Redis-–∫–ª–∏–µ–Ω—Ç (node-redis v4)
import { createClient } from 'redis';

// üß† –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (POSTGRES_URL, REDIS_URL –∏ —Ç.–¥.)
import { CONFIG } from './config/index.js';

// üì¢ –û–±—â–∏–π –ª–æ–≥–≥–µ—Ä
import { sharedLogger } from './sharedLogger.js';

// üîÅ –û–¥–∏–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
let redisClient = null;
let connected = false;

/**
 * üì° –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç singleton Redis-–∫–ª–∏–µ–Ω—Ç.
 * 
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 * - –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ;
 * - –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Üí —Å–æ–∑–¥–∞—ë—Ç, –ø–æ–¥–∫–ª—é—á–∞–µ—Ç, –ª–æ–≥–∏—Ä—É–µ—Ç;
 * - –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Üí –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
 */
export async function getRedisClient() {
  if (!redisClient) {
    redisClient = createClient({ url: CONFIG.redis.url });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ Redis
    redisClient.on('error', async (err) => {
      try {
        await sharedLogger({
          service: 'redisClient',
          level: 'error',
          message: {
            type: 'redis_error',
            error: err.message,
          },
        });
      } catch (_) {}
    });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    redisClient.on('reconnecting', async () => {
      try {
        await sharedLogger({
          service: 'redisClient',
          level: 'warn',
          message: {
            type: 'redis_reconnecting',
          },
        });
      } catch (_) {}
    });

    try {
      await redisClient.connect(); // üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      connected = true;

      // ‚úÖ –õ–æ–≥ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      await sharedLogger({
        service: 'redisClient',
        level: 'info',
        message: {
          type: 'redis_connected',
          url: CONFIG.redis.url,
        },
      });

    } catch (err) {
      connected = false;
      throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: ' + err.message);
    }
  }

  return redisClient;
}

/**
 * üõë –û—Ç–∫–ª—é—á–∞–µ—Ç Redis (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω).
 * –ë–µ–∑–æ–ø–∞—Å–µ–Ω –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ.
 */
export async function disconnectRedisClient() {
  if (redisClient) {
    try {
      await redisClient.quit(); // üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

      await sharedLogger({
        service: 'redisClient',
        level: 'info',
        message: {
          type: 'redis_disconnected',
        },
      });

    } catch (err) {
      try {
        await sharedLogger({
          service: 'redisClient',
          level: 'warn',
          message: {
            type: 'redis_disconnect_failed',
            error: err.message,
          },
        });
      } catch (_) {}
    }

    redisClient = null;
    connected = false;
  }
}
