import { describe, it, expect, vi } from 'vitest';
import { startRedisRetryWorker, stopRedisRetryWorker } from '@/services/solana_subscriber/queue/redisRetryQueue.js';
import * as redisLogSender from '@/services/solana_subscriber/utils/redisLogSender.js';

describe('D9: –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –≤—Å—Ç–∞—ë—Ç –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è event loop', () => {
  it('—Ç–∞–π–º–µ—Ä –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç–∏–∫–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –∑–∞–≤–∏—Å—à–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞', async () => {
    vi.useFakeTimers();

    // –ú–æ–∫–∞–µ–º redisPublishLog ‚Äî –∑–∞–≤–∏—Å–∞–µ—Ç
    vi.spyOn(redisLogSender, 'redisPublishLog').mockImplementation(() => {
      return new Promise(() => {}); // "–≤–∏—Å–∏–º" –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    });

    startRedisRetryWorker(); // –∑–∞–ø—É—Å—Ç–∏–º –∑–∞–≤–∏—Å—à–∏–π –≤–æ—Ä–∫–µ—Ä

    // üß™ –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ setTimeout —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    let ticked = false;
    setTimeout(() => {
      ticked = true;
    }, 5000);

    vi.advanceTimersByTime(5000);
    expect(ticked).toBe(true);

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Ä–∫–µ—Ä
    stopRedisRetryWorker();
    vi.useRealTimers();
  });
});
