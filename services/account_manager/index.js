import { createClient } from "redis";
import { sendToRedisBuffer } from "../utils/redis_buffer.js";
import dotenv from "dotenv";

dotenv.config();

const redisClient = createClient();
await redisClient.connect();

// üìå **–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –ø–∞–¥–∞–ª**
process.on("uncaughtException", (err) => {
    console.error(`[‚ùå] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
});

process.on("unhandledRejection", (reason, promise) => {
    console.error(`[‚ùå] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –≤ –ø—Ä–æ–º–∏—Å–µ: ${reason}`);
});

// –ö—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ Redis)
let subscribedChains = new Map(); // { chain_id: Set(–∞–¥—Ä–µ—Å–∞) }

console.log("[‚úÖ] Account Manager –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏...");

// üìå **–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ Redis –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ**
async function restoreSubscriptions() {
    try {
        const keys = await redisClient.keys("subscribed_accounts_*");
        for (const key of keys) {
            const chain_id = key.replace("subscribed_accounts_", "");
            const accounts = JSON.parse(await redisClient.get(key)) || [];
            subscribedChains.set(chain_id, new Set(accounts));
            
            // üìå **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ solana_subscriber –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä**
            sendToRedisBuffer('subscribe_addresses_stream', { chain_id, accounts: JSON.stringify(accounts) });
            console.log(`[üîÑ] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${chain_id}: ${accounts.length} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);
        }
    } catch (error) {
        console.error("[‚ùå] –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ Redis:", error.message);
    }
}

// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
await restoreSubscriptions();

// üìå **–°–ª—É—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç —Ü–µ–ø–æ—á–µ–∫**
async function processSubscriptionMessages() {
    while (true) {
        try {
            const messages = await redisClient.xReadGroup('subscribe_addresses_stream_group', 'account_manager', [{ key: 'subscribe_addresses_stream', id: '>' }], { COUNT: 10, BLOCK: 5000 });
            if (!messages) continue;

            for (const message of messages[0].messages) {
                const { chain_id, action, accounts } = JSON.parse(message.message.accounts);

                if (!chain_id || !Array.isArray(accounts) || accounts.length === 0) {
                    console.warn("[‚ö†] –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.");
                    continue;
                }

                if (!subscribedChains.has(chain_id)) {
                    subscribedChains.set(chain_id, new Set());
                }

                let updated = false;
                const chainSubscriptions = subscribedChains.get(chain_id);

                if (action === "subscribe") {
                    for (const account of accounts) {
                        if (!chainSubscriptions.has(account)) {
                            chainSubscriptions.add(account);
                            updated = true;
                        }
                    }
                } else if (action === "unsubscribe") {
                    for (const account of accounts) {
                        if (chainSubscriptions.has(account)) {
                            chainSubscriptions.delete(account);
                            updated = true;
                        }
                    }
                }

                if (!updated) continue;

                await redisClient.set(`subscribed_accounts_${chain_id}`, JSON.stringify([...chainSubscriptions]));
                console.log(`[‚úÖ] –ü–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${chain_id}: ${chainSubscriptions.size} –∞–∫–∫–∞—É–Ω—Ç–æ–≤`);

                sendToRedisBuffer('subscribe_addresses_stream', { chain_id, accounts: JSON.stringify([...chainSubscriptions]) });
                await redisClient.xAck('subscribe_addresses_stream', 'subscribe_addresses_stream_group', message.id);
            }
        } catch (error) {
            console.error("[‚ùå] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏:", error.message);
        }
    }
}

processSubscriptionMessages();
