import { Connection, PublicKey } from "@solana/web3.js";
import { subscribeToLogs, unsubscribeFromLogs } from "./subscriptionManager.js";
import { getMissedTransactions } from "./httpClient.js";
import { logger } from "./utils/logger.js";
import dotenv from "dotenv";

dotenv.config();

// üìå **–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –ø–∞–¥–∞–ª**
process.on("uncaughtException", (err) => {
    logger.error(`[‚ùå] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
});

process.on("unhandledRejection", (reason, promise) => {
    logger.error(`[‚ùå] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –≤ –ø—Ä–æ–º–∏—Å–µ: ${reason}`);
});

// üìå **–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã) –∏–∑ .env**
const CONTROL_ACCOUNTS = process.env.CONTROL_ACCOUNTS.split(",").map(acc => acc.trim());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Solana
let connection = createConnection();

// –ö—ç—à –ø–æ–¥–ø–∏—Å–æ–∫
let activeSubscriptions = new Map(); // { chain_id: { address: subscription_id } }
let newWebSocketTransactions = new Set(); // –ö—ç—à –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ WebSocket
let isRecoveringWebsocket = false; // üìå **–§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è**

// üìå **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤**
let lastControlActivity = Date.now();

// üìå **–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫**
function createConnection() {
    const conn = new Connection(process.env.RPC_HTTP_URL, {
        wsEndpoint: process.env.RPC_WS_URL,
    });

    conn._rpcWebSocket.on("close", async () => {
        logger.warn("[‚ö†] WebSocket Solana –æ—Ç–∫–ª—é—á–∏–ª—Å—è! –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...");
        setTimeout(async () => {
            connection = createConnection();
            await restoreSubscriptions();
        }, 5000);
    });

    conn._rpcWebSocket.on("error", (err) => {
        logger.error(`[‚ùå] –û—à–∏–±–∫–∞ WebSocket: ${err.message}`);
    });

    return conn;
}

// üìå **–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã**
for (const account of CONTROL_ACCOUNTS) {
    connection.onLogs(
        new PublicKey(account),
        (logInfo) => {
            logger.info(`[‚úÖ] –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ${account} –ø–æ–ª—É—á–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${logInfo.signature}`);
            lastControlActivity = Date.now(); // –û–±–Ω—É–ª—è–µ–º —Ç–∞–π–º–µ—Ä "—Ç–∏—à–∏–Ω—ã"
        },
        "confirmed"
    );
}

// üìå **–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è WebSocket**
async function restoreSubscriptions() {
    newWebSocketTransactions.clear(); // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    isRecoveringWebsocket = true;
    for (const [chain_id, subscriptions] of activeSubscriptions.entries()) {
        await subscribeToLogs(connection, chain_id, [...subscriptions.keys()], activeSubscriptions, isRecoveringWebsocket);
    }
    await recoverMissedTransactions();
    isRecoveringWebsocket = false;

    // üìå **–ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ Redis**
    for (const tx of newWebSocketTransactions) {
        sendToRedisBuffer("solana_logs_stream", tx);
    }
    newWebSocketTransactions.clear();
}

// üìå **–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π**
async function recoverMissedTransactions() {
    logger.info("[üîÑ] –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...");
    const missedTransactions = await getMissedTransactions(connection, activeSubscriptions, newWebSocketTransactions);
    
    for (const tx of missedTransactions) {
        sendToRedisBuffer("solana_logs_stream", tx);
    }
    
    logger.info("[‚úÖ] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ WebSocket.");
}

// üìå **–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ "—Ç–∏—à–∏–Ω—ã"**
async function checkWebSocketHealth() {
    const now = Date.now();
    const silenceDuration = now - lastControlActivity;

    if (silenceDuration >= 5 * 60 * 1000) { // 5 –º–∏–Ω—É—Ç –±–µ–∑ —Å–æ–±—ã—Ç–∏–π
        logger.warn("[‚ö†] –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –º–æ–ª—á–∞—Ç 5 –º–∏–Ω—É—Ç. –ü—Ä–æ–≤–µ—Ä—è—é –∏—Ö —á–µ—Ä–µ–∑ HTTP...");

        let hasNewTransactions = false;

        for (const account of CONTROL_ACCOUNTS) {
            try {
                const signatures = await connection.getSignaturesForAddress(new PublicKey(account), { limit: 1 });
                if (signatures.length > 0) {
                    hasNewTransactions = true;
                    break;
                }
            } catch (error) {
                logger.error(`[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ${account} —á–µ—Ä–µ–∑ HTTP: ${error.message}`);
            }
        }

        if (hasNewTransactions) {
            logger.warn("[‚ö†] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ HTTP, –Ω–æ WebSocket –∏—Ö –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞—é—Å—å...");
            connection = createConnection();
            await restoreSubscriptions();
        } else {
            logger.info("[‚úÖ] –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Ç–æ–∂–µ –ø—É—Å—Ç—ã, WebSocket —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.");
        }
    }
}

// üìå **–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É "—Ç–∏—à–∏–Ω—ã" –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É**
setInterval(checkWebSocketHealth, 60 * 1000);

logger.info("[‚úÖ] Solana Subscriber –∑–∞–ø—É—â–µ–Ω!");
