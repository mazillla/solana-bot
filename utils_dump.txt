
/utils/config/env.js:
// utils/config/env.js

// ‚úÖ –ì–û–¢–û–í

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.
 *
 * @param {string} key - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, "POSTGRES_URL")
 * @param {Object} options
 * @param {boolean} options.required - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
 * @param {*} options.fallback - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export function getEnvVar(key, { required = true, fallback = undefined } = {}) {
    const value = process.env[key] ?? fallback;
  
    if (required && value === undefined) {
      console.error(`[env] ‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${key} –Ω–µ –∑–∞–¥–∞–Ω–∞ –∏ –Ω–µ –∏–º–µ–µ—Ç fallback`);
      process.exit(1);
    }
  
    return value;
  }
  

/utils/config/index.js:
// utils/config/index.js

// ‚úÖ –ì–û–¢–û–í

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
import dotenv from 'dotenv';
dotenv.config(); // –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–µ—Ä—ë—Ç .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞

// üìò –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è env-–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
import { getEnvVar } from './env.js';

// üìã –°—Ö–µ–º–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (POSTGRES_URL, REDIS_URL –∏ —Ç.–ø.)
import { envSchema } from './schema.js';

// üìë –°—Ö–µ–º—ã Redis-–∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (subscribe_command, unsubscribe –∏ —Ç.–ø.)
import { schemas } from './schemas.js';

/**
 * ‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö: –ª–æ–≥–≥–µ—Ä, –ë–î, Redis, RedisStreamBus, –∏ —Ç.–¥.
 */
export const CONFIG = {
  /**
   * üîå PostgreSQL
   * –ü—Ä–∏–º–µ—Ä: postgres://user:pass@postgres:5432/dbname
   */
  db: {
    connectionString: getEnvVar('POSTGRES_URL', envSchema.POSTGRES_URL),
  },

  /**
   * üì° Redis
   * –ü—Ä–∏–º–µ—Ä: redis://localhost:6379
   */
  redis: {
    url: getEnvVar('REDIS_URL', envSchema.REDIS_URL),
  },

  /**
   * üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug, info, warn, error)
   */
  logLevel: getEnvVar('LOG_LEVEL', envSchema.LOG_LEVEL),

  /**
   * üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ (development, production, test)
   */
  environment: getEnvVar('NODE_ENV', envSchema.NODE_ENV),

  /**
   * üìë –°—Ö–µ–º—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Redis-–∫–æ–º–∞–Ω–¥
   * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ validateEvent(...) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π
   */
  schemas,
};


/utils/config/schema.js:
// utils/config/schema.js

// ‚úÖ –ì–û–¢–û–í

export const envSchema = {
    POSTGRES_URL: { required: true },
    REDIS_URL: { required: false, fallback: 'redis://localhost:6379' },
    LOG_LEVEL: { required: false, fallback: 'info' },
    NODE_ENV: { required: false, fallback: 'development' },
  };
  

/utils/config/schemas.js:
// utils/config/schemas.js

// ‚úÖ –ì–û–¢–û–í

export const schemas = {
    subscribe_command: {
      fields: ['chain_id', 'account'],
    },
    unsubscribe_command: {
      fields: ['chain_id', 'account'],
    },
    config_update_command: {
      fields: [],
    }
  };
  

/utils/eventSchemas.js:
// utils/eventSchemas.js

// ‚úÖ –ì–û–¢–û–í

// üì¶ –ò–º–ø–æ—Ä—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
// CONFIG.schemas –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
import { CONFIG } from './config/index.js';

/**
 * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–±—ã—Ç–∏—è –ø–æ —Å—Ö–µ–º–µ
 *
 * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'subscribe_command')
 * @param {object} payload - –û–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø–æ–ª—è –∫–æ–º–∞–Ω–¥—ã
 * @returns {{
 *   valid: boolean,
 *   missingFields?: string[]
 * }}
 *
 * üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö Redis-–∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è,
 *     —á—Ç–æ –≤ payload –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å–æ–≥–ª–∞—Å–Ω–æ config.json ‚Üí schemas
 */
export function validateEvent(eventName, payload) {
  // üîç –ò—â–µ–º —Å—Ö–µ–º—É –ø–æ –∏–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
  // (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ö–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ ‚Äî –ø–æ—ç—Ç–æ–º—É –º–æ–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∏–∂–Ω–µ–º—É)
  const schema = CONFIG.schemas?.[eventName];

  // ‚ö†Ô∏è –ï—Å–ª–∏ —Å—Ö–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π
  if (!schema) {
    return {
      valid: false,
      missingFields: [`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è "${eventName}"`]
    };
  }

  // üìã –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∏–∑ —Å—Ö–µ–º—ã
  const requiredFields = schema.fields || [];

  // üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ payload
  const missingFields = requiredFields.filter(field => !(field in payload));

  // ‚ùå –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø–æ–ª—è ‚Äî —Å—á–∏—Ç–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º
  if (missingFields.length > 0) {
    return {
      valid: false,
      missingFields
    };
  }

  // ‚úÖ –í—Å–µ –ø–æ–ª—è –Ω–∞ –º–µ—Å—Ç–µ ‚Äî —É—Å–ø–µ—Ö
  return { valid: true };
}


/utils/heartbeat.js:
// ‚úÖ –û–ë–ù–û–í–õ–Å–ù–ù–´–ô

import os from 'os';
import { sharedLogger } from './sharedLogger.js';
import { getCurrentConfig } from '../services/solana_subscriber/config/configLoader.js';
import { getRedisClient } from './redisClientSingleton.js';

let heartbeatInterval = null;

/**
 * üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç heartbeat-–æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Redis Stream.
 * 
 * @param {string} serviceName ‚Äî –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: solana_subscriber)
 */
export async function startHeartbeat(serviceName) {
  const instanceId = `${serviceName}@${os.hostname()}:${process.pid}`;
  let streamKey = 'system_heartbeat';
  let intervalMs = 30000;

  try {
    const config = getCurrentConfig();
    streamKey = config.heartbeat_stream_key || streamKey;
    intervalMs = config.heartbeat_interval_ms || intervalMs;
  } catch (err) {
    try {
      await sharedLogger({
        service: serviceName,
        level: 'warn',
        message: {
          type: 'heartbeat_config_missing',
          error: err.message,
        },
      });
    } catch (_) {}
  }

  heartbeatInterval = setInterval(async () => {
    const message = {
      type: 'HEARTBEAT',
      service: serviceName,
      instance_id: instanceId,
      timestamp: Date.now(),
    };

    // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (typeof message !== 'object' || message === null) {
      await sharedLogger({
        service: serviceName,
        level: 'warn',
        message: {
          type: 'heartbeat_skipped',
          reason: 'invalid_message_object',
        },
      });
      return;
    }

    try {
      const redis = await getRedisClient();
      await redis.xAdd(streamKey, '*', {
        data: JSON.stringify(message),
      });

    } catch (err) {
      try {
        await sharedLogger({
          service: serviceName,
          level: 'error',
          message: {
            type: 'heartbeat_publish_failed',
            error: err.message,
          },
        });
      } catch (_) {}
    }
  }, intervalMs);
}

/**
 * üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É heartbeat-—Å–æ–æ–±—â–µ–Ω–∏–π
 */
export async function stopHeartbeat() {
  if (heartbeatInterval) {
    clearInterval(heartbeatInterval);
    heartbeatInterval = null;
  }
}


/utils/isValidPayload.js:
// utils/isValidPayload.js
export function isValidPayload(obj) {
    return obj !== null && typeof obj === 'object' && !Array.isArray(obj);
  }
  

/utils/redisClientSingleton.js:
// utils/redisClientSingleton.js

// ‚úÖ –ì–û–¢–û–í (–æ–±–Ω–æ–≤–ª—ë–Ω)

// üì¶ Redis-–∫–ª–∏–µ–Ω—Ç (node-redis v4)
import { createClient } from 'redis';

// üß† –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (POSTGRES_URL, REDIS_URL –∏ —Ç.–¥.)
import { CONFIG } from './config/index.js';

// üì¢ –û–±—â–∏–π –ª–æ–≥–≥–µ—Ä
import { sharedLogger } from './sharedLogger.js';

// üîÅ –û–¥–∏–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –Ω–∞ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
let redisClient = null;
let connected = false;

/**
 * üì° –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç singleton Redis-–∫–ª–∏–µ–Ω—Ç.
 * 
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 * - –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ;
 * - –µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω ‚Üí —Å–æ–∑–¥–∞—ë—Ç, –ø–æ–¥–∫–ª—é—á–∞–µ—Ç, –ª–æ–≥–∏—Ä—É–µ—Ç;
 * - –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Üí –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
 */
export async function getRedisClient() {
  if (!redisClient) {
    redisClient = createClient({ url: CONFIG.redis.url });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ Redis
    redisClient.on('error', async (err) => {
      try {
        await sharedLogger({
          service: 'redisClient',
          level: 'error',
          message: {
            type: 'redis_error',
            error: err.message,
          },
        });
      } catch (_) {}
    });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    redisClient.on('reconnecting', async () => {
      try {
        await sharedLogger({
          service: 'redisClient',
          level: 'warn',
          message: {
            type: 'redis_reconnecting',
          },
        });
      } catch (_) {}
    });

    try {
      await redisClient.connect(); // üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      connected = true;

      // ‚úÖ –õ–æ–≥ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      await sharedLogger({
        service: 'redisClient',
        level: 'info',
        message: {
          type: 'redis_connected',
          url: CONFIG.redis.url,
        },
      });

    } catch (err) {
      connected = false;
      throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: ' + err.message);
    }
  }

  return redisClient;
}

/**
 * üõë –û—Ç–∫–ª—é—á–∞–µ—Ç Redis (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω).
 * –ë–µ–∑–æ–ø–∞—Å–µ–Ω –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ.
 */
export async function disconnectRedisClient() {
  if (redisClient) {
    try {
      await redisClient.quit(); // üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

      await sharedLogger({
        service: 'redisClient',
        level: 'info',
        message: {
          type: 'redis_disconnected',
        },
      });

    } catch (err) {
      try {
        await sharedLogger({
          service: 'redisClient',
          level: 'warn',
          message: {
            type: 'redis_disconnect_failed',
            error: err.message,
          },
        });
      } catch (_) {}
    }

    redisClient = null;
    connected = false;
  }
}


/utils/redisStreamBus.js:
// utils/redisStreamBus.js

// üì¶ Redis –∫–ª–∏–µ–Ω—Ç —á–µ—Ä–µ–∑ singleton
import { getRedisClient } from './redisClientSingleton.js';

// üß† –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
import { sharedLogger } from './sharedLogger.js';

/// ------------------------------------------------------------------------
/// üîÅ –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø –ü–û–¢–û–ö–û–í –ò –ì–†–£–ü–ü
/// ------------------------------------------------------------------------

const STREAM_ROUTING = {
  subscribe_command: 'subscriber_control',
  unsubscribe_command: 'subscriber_control',
  config_update_command: 'subscriber_control',
  transaction_published: 'transaction_stream',
  subscription_state_changed: 'subscriber_subscription_state',
};

const GROUP_ROUTING = {
  subscribe_command: 'subscriber_runtime',
  unsubscribe_command: 'subscriber_runtime',
  config_update_command: 'subscriber_runtime',
  transaction_published: 'analyzer_group',
  subscription_state_changed: 'ui_state_syncer',
};

const MAXLEN = 10000;
const APPROXIMATE = true;
const initializedGroups = new Set();

/// ------------------------------------------------------------------------
/// üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è payload –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
/// ------------------------------------------------------------------------

function isValidPayload(payload) {
  return typeof payload === 'object' && payload !== null && !Array.isArray(payload);
}

/// ------------------------------------------------------------------------
/// üß± –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
/// ------------------------------------------------------------------------

async function ensureGroupExists({ stream, group, service }) {
  const redis = await getRedisClient();
  const groupKey = `${stream}::${group}`;
  if (initializedGroups.has(groupKey)) return;

  try {
    await redis.xGroupCreate(stream, group, '$', { MKSTREAM: true });
  } catch (err) {
    if (!err?.message?.includes('BUSYGROUP')) {
      await sharedLogger({
        service,
        level: 'error',
        message: {
          type: 'stream_group_create_failed',
          stream,
          group,
          error: err.message,
        },
      });
    }
  }

  initializedGroups.add(groupKey);
}

/// ------------------------------------------------------------------------
/// üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –≤ Redis Stream
/// ------------------------------------------------------------------------

export async function publishToStream({ service, type, payload, stream, group }) {
  const resolvedStream = stream || STREAM_ROUTING[type];
  const resolvedGroup = group || GROUP_ROUTING[type];

  // üöß –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ª–∏ –ø–æ—Ç–æ–∫ –∏ –≥—Ä—É–ø–ø–∞
  if (!resolvedStream || !resolvedGroup) {
    await sharedLogger({
      service,
      level: 'warn',
      message: {
        type: 'stream_publish_skipped',
        reason: 'unknown_type_or_group',
        input: { type, stream, group },
      },
    });
    return;
  }

  // üöß –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî —è–≤–ª—è–µ—Ç—Å—è –ª–∏ payload –≤–∞–ª–∏–¥–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
  if (!isValidPayload(payload)) {
    await sharedLogger({
      service,
      level: 'warn',
      message: {
        type: 'stream_publish_skipped',
        reason: 'invalid_payload',
        payloadType: typeof payload,
        type,
      },
    });
    return;
  }

  // ‚úÖ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞
  await ensureGroupExists({ stream: resolvedStream, group: resolvedGroup, service });

  const redis = await getRedisClient();
  const message = {
    type,
    service,
    timestamp: Date.now(),
    payload,
  };

  try {
    await redis.xAdd(resolvedStream, '*', { data: JSON.stringify(message) }, {
      MAXLEN,
      approximate: APPROXIMATE,
    });
  } catch (err) {
    await sharedLogger({
      service,
      level: 'error',
      message: {
        type: 'stream_publish_failed',
        stream: resolvedStream,
        group: resolvedGroup,
        error: err.message,
      },
    });
  }
}


/utils/sharedLogger.js:
// utils/sharedLogger.js

// ‚úÖ –ì–û–¢–û–í (–æ–±–Ω–æ–≤–ª—ë–Ω —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)

// üì¶ Redis-–∫–ª–∏–µ–Ω—Ç (node-redis v4)
import { createClient } from 'redis';

// üß† –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (POSTGRES_URL, REDIS_URL –∏ –¥—Ä.)
import { CONFIG } from './config/index.js';

// üîç –í–∞–ª–∏–¥–∞—Ü–∏—è payload –ø–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
import { isValidPayload } from './isValidPayload.js'; // üëà –Ω–æ–≤–∞—è —É—Ç–∏–ª–∏—Ç–∞

// üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let redis = null;                 // Redis –∫–ª–∏–µ–Ω—Ç
let isConnected = false;         // –§–ª–∞–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const STREAM_KEY = 'logs:stream'; // –ò–º—è Redis Stream, –∫—É–¥–∞ –ø–∏—à—É—Ç—Å—è –ª–æ–≥–∏

/**
 * üì¢ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
 *
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis Stream `logs:stream`.
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ:
 * - Redis —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
 * - –õ–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è
 * - –í —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback
 *
 * @param {object} options
 * @param {string} options.service - –∏–º—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
 * @param {string} [options.level="info"] - —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞ (info, warn, error)
 * @param {object|string} options.message - —Ç–µ–ª–æ –ª–æ–≥–∞ (–æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
 */
export async function sharedLogger({ service, level = 'info', message }) {
  try {
    // ‚ùå –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø—É—Å—Ç—ã—Ö / –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (
      typeof message !== 'string' &&
      !isValidPayload(message)
    ) {
      await fallbackLogger({
        service,
        level: 'warn',
        message: {
          type: 'shared_logger_invalid_message',
          input: message,
        },
      });
      return;
    }

    // üîå –°–æ–∑–¥–∞—ë–º Redis-–∫–ª–∏–µ–Ω—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    if (!redis) {
      redis = createClient({ url: CONFIG.redis.url });
    }

    // üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ)
    if (!isConnected) {
      await redis.connect();
      isConnected = true;
    }

    // üßæ –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥-–∑–∞–ø–∏—Å—å
    const logEntry = {
      timestamp: new Date().toISOString(),
      service,
      level,
      message,
    };

    // üí° –ü—Ä–æ–±—É–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å
    let jsonData;
    try {
      jsonData = JSON.stringify(logEntry);
    } catch (serializationError) {
      await fallbackLogger({
        service,
        level: 'error',
        message: {
          type: 'shared_logger_serialization_failed',
          error: serializationError.message,
        },
      });
      return;
    }

    // üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Redis Stream
    await redis.xAdd(STREAM_KEY, '*', { data: jsonData });

  } catch (err) {
    // üõë Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Üí fallback
    await fallbackLogger({
      service,
      level: 'warn',
      message: {
        type: 'shared_logger_redis_failed',
        error: err.message,
      },
    });
  }
}

/**
 * üõ† –†–µ–∑–µ—Ä–≤–Ω—ã–π –ª–æ–≥–≥–µ—Ä (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–±–æ—è—Ö Redis –∏–ª–∏ JSON.stringify)
 *
 * –í—ã–≤–æ–¥–∏—Ç –ª–æ–≥ –≤ stdout –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö.
 */
async function fallbackLogger({ service, level, message }) {
  const safeOutput = {
    timestamp: new Date().toISOString(),
    service,
    level,
    message,
  };

  console.log(`[fallbackLogger]`, JSON.stringify(safeOutput, null, 2));
}


/utils/sleep.js:
// utils/sleep.js
export function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  

/utils/withAbortTimeout.js:
// utils/withAbortTimeout.js

// ‚úÖ –ì–û–¢–û–í

/**
 * ‚è± –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º.
 * 
 * üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AbortController, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ callback.
 * –ü—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ç–∞–π–º–µ—Ä—É, –µ—Å–ª–∏ callback –Ω–µ —É—Å–ø–µ–ª.
 *
 * @param {function(AbortSignal): Promise<any>} promiseFn - —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è signal (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)
 * @param {number} timeoutMs - —Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
 * @returns {Promise<any>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç promiseFn –∏–ª–∏ –æ—à–∏–±–∫–∞ AbortError
 */
export function withAbortTimeout(promiseFn, timeoutMs = 5000) {
  const controller = new AbortController();

  const timeout = setTimeout(() => {
    controller.abort(); // üí£ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
  }, timeoutMs);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞—è –ø–æ —Ç–∞–π–º–µ—Ä—É
  return promiseFn(controller.signal)
    .finally(() => clearTimeout(timeout)); // üíß –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
}

