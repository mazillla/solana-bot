// ‚úÖ –û–ë–ù–û–í–õ–Å–ù–ù–´–ô

import os from 'os';
import { sharedLogger } from './sharedLogger.js';
import { getCurrentConfig } from '../services/solana_subscriber/config/configLoader.js';
import { getRedisClient } from './redisClientSingleton.js';

let heartbeatInterval = null;

/**
 * üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç heartbeat-–æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Redis Stream.
 * 
 * @param {string} serviceName ‚Äî –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: solana_subscriber)
 */
export async function startHeartbeat(serviceName) {
  const instanceId = `${serviceName}@${os.hostname()}:${process.pid}`;
  let streamKey = 'system_heartbeat';
  let intervalMs = 30000;

  try {
    const config = getCurrentConfig();
    streamKey = config.heartbeat_stream_key || streamKey;
    intervalMs = config.heartbeat_interval_ms || intervalMs;
  } catch (err) {
    try {
      await sharedLogger({
        service: serviceName,
        level: 'warn',
        message: {
          type: 'heartbeat_config_missing',
          error: err.message,
        },
      });
    } catch (_) {}
  }

  heartbeatInterval = setInterval(async () => {
    const message = {
      type: 'HEARTBEAT',
      service: serviceName,
      instance_id: instanceId,
      timestamp: Date.now(),
    };

    // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (typeof message !== 'object' || message === null) {
      await sharedLogger({
        service: serviceName,
        level: 'warn',
        message: {
          type: 'heartbeat_skipped',
          reason: 'invalid_message_object',
        },
      });
      return;
    }

    try {
      const redis = await getRedisClient();
      await redis.xAdd(streamKey, '*', {
        data: JSON.stringify(message),
      });

    } catch (err) {
      try {
        await sharedLogger({
          service: serviceName,
          level: 'error',
          message: {
            type: 'heartbeat_publish_failed',
            error: err.message,
          },
        });
      } catch (_) {}
    }
  }, intervalMs);
}

/**
 * üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É heartbeat-—Å–æ–æ–±—â–µ–Ω–∏–π
 */
export async function stopHeartbeat() {
  if (heartbeatInterval) {
    clearInterval(heartbeatInterval);
    heartbeatInterval = null;
  }
}
