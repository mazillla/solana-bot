// services/solana_subscriber/queue/parseQueue.js

// ‚úÖ –ì–û–¢–û–í

/**
 * üß† –û—á–µ—Ä–µ–¥—å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º (txid), –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.
 *
 * üí° –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
 * - –≤–º–µ—Å—Ç–æ sleep(200) –ø—Ä–∏ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏ ‚Äî –≤–æ—Ä–∫–µ—Ä—ã "–∑–∞—Å—ã–ø–∞—é—Ç"
 * - –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ‚Äî "–±—É–¥–∏–º" –≤–æ—Ä–∫–µ—Ä—ã —á–µ—Ä–µ–∑ Promise
 */

import { getParsedTransactionWithTimeout } from '../rpc/rpcUtils.js';
import { getCurrentConfig } from '../config/configLoader.js';
import { enqueueTransaction } from './publishQueue.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { sleep } from '../../../utils/sleep.js';

// üì¶ –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
const queue = [];

// üèÉ‚Äç‚ôÇÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
let isRunning = false;

// üî¢ –°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
let runningTasks = 0;

// üîî –ú–µ—Ö–∞–Ω–∏–∑–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞)
let resolver = null;
let waitForNewTask = new Promise((res) => {
  resolver = res;
});

/**
 * üì• –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –±—É–¥–∏—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ "—Å–ø—è—Ç".
 *
 * @param {Object} task - –æ–±—ä–µ–∫—Ç { chain_id, account, signature, enqueuedAt? }
 */
export function enqueueSignature(task) {
  if (!task.enqueuedAt) {
    task.enqueuedAt = Date.now();
  }

  queue.push(task);

  // ‚è∞ –ë—É–¥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –æ–∂–∏–¥–∞–ª–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
  if (resolver) {
    resolver(); // –ø—Ä–æ–±—É–∂–¥–∞–µ–º
    resolver = null;
    waitForNewTask = new Promise((res) => {
      resolver = res; // —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    });
  }
}

/**
 * üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç N –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏.
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º parse_concurrency –∏–∑ config.
 */
export function startParseQueueWorker() {
  if (isRunning) return;
  isRunning = true;

  const concurrency = getCurrentConfig().parse_concurrency || 3;

  for (let i = 0; i < concurrency; i++) {
    runWorkerLoop(); // üîÅ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä
  }
}

/**
 * üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞).
 */
export function stopParseQueueWorker() {
  isRunning = false;
}

/**
 * üîÅ –í–æ—Ä–∫–µ—Ä:
 * - –∑–∞–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞—á—É
 * - –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á ‚Äî –∂–¥—ë—Ç, –ø–æ–∫–∞ –ø—Ä–∏–¥—ë—Ç –Ω–æ–≤–∞—è
 * - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
 */
async function runWorkerLoop() {
  while (isRunning) {
    const task = queue.shift();

    if (!task) {
      await waitForNewTask; // üí§ –∂–¥—ë–º, –ø–æ–∫–∞ –ø–æ—Å—Ç—É–ø–∏—Ç –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
      continue;
    }

    runningTasks++;

    try {
      await handleSignatureTask(task);
    } catch (err) {
      try {
        await sharedLogger({
          service: getCurrentConfig().service_name,
          level: 'error',
          message: {
            type: 'parse_queue_crash',
            error: err.message,
          },
        });
      } catch (_) {}
    }

    runningTasks--;
  }
}

/**
 * ‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å–∏–≥–Ω–∞—Ç—É—Ä—É:
 * - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç "—Å–≤–µ–∂–µ—Å—Ç—å"
 * - –¥–µ–ª–∞–µ—Ç getParsedTransaction —Å —Ç–∞–π–º–∞—É—Ç–æ–º
 * - –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ ‚Äî –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ publishQueue
 * - –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
 */
async function handleSignatureTask(task) {
  const config = getCurrentConfig();
  const maxAge = config.max_parse_duration_ms || 86400000;
  const now = Date.now();

  // ‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
  if (now - task.enqueuedAt > maxAge) {
    try {
      await sharedLogger({
        service: config.service_name,
        level: 'warn',
        message: {
          type: 'unresolved_transaction',
          signature: task.signature,
          reason: 'max_age_exceeded',
        },
      });
    } catch (_) {}
    return;
  }

  try {
    const rpc = await import('../rpc/rpcPool.js').then(mod => mod.getAvailableRpc());
    if (!rpc) {
      enqueueSignature(task); // retry –ø–æ–∑–∂–µ
      return;
    }

    if (!rpc.httpLimiter.removeToken()) {
      enqueueSignature(task); // –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω ‚Äî retry
      await sleep(100);
      return;
    }

    const parsed = await getParsedTransactionWithTimeout(rpc, task.signature);
    if (!parsed) {
      enqueueSignature(task); // –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî retry
      return;
    }

    const blockTime = parsed.blockTime || null;
    const timestamp = blockTime ? blockTime * 1000 : Date.now();

    const message = {
      chain_id: task.chain_id,
      account: task.account,
      signature: task.signature,
      log: parsed,
      blockTime,
      timestamp,
    };

    enqueueTransaction(message); // ‚úÖ –ø–µ—Ä–µ–¥–∞—ë–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é

  } catch (err) {
    enqueueSignature(task); // –æ—à–∏–±–∫–∞ ‚Üí retry
  }
}
