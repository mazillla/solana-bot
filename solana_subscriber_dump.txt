
/services/solana_subscriber/config/configLoader.js:
// services/solana_subscriber/config/configLoader.js

// ‚úÖ –ì–û–¢–û–í (—Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)

import { getSubscriberConfigFromDb } from '../db/subscriberConfig.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { validateConfig } from './validateConfig.js'; // üÜï –ò–º–ø–æ—Ä—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞

let currentConfig = null;

/**
 * üì• –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã subscriber_config.
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é `currentConfig`, –¥–æ—Å—Ç—É–ø–Ω—É—é –≤–æ –≤—Å—ë–º –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–µ.
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:
 * - –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞
 * - –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ Redis-–∫–æ–º–∞–Ω–¥–µ config_update_command
 */
export async function loadSubscriberConfig() {
  const raw = await getSubscriberConfigFromDb();

  // üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–∞–ª–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç
  if (!raw || typeof raw !== 'object') {
    throw new Error('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ë–î –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
  }

  // üß™ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ validateConfig.js)
  const { valid, errors } = validateConfig(raw);
  if (!valid) {
    await sharedLogger({
      service: raw.service_name || 'solana_subscriber',
      level: 'error',
      message: {
        type: 'config_validation_failed',
        errors,
      },
    });
    throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ë–î –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é');
  }

  // üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π (immutable) –æ–±—ä–µ–∫—Ç
  currentConfig = Object.freeze({
    parse_concurrency: raw.parse_concurrency || 3,
    max_parse_duration_ms: raw.max_parse_duration_ms || 86400000,
    heartbeat_interval_ms: raw.heartbeat_interval_ms || 30000,
    rpc_endpoints: raw.rpc_endpoints || [],
    control_accounts: raw.control_accounts || [],
    silence_threshold_ms: raw.silence_threshold_ms || 30000,
    queue_max_length: raw.queue_max_length || 1000,
    rpc_timeout_ms: raw.rpc_timeout_ms || 5000,
    default_history_max_age_ms: raw.default_history_max_age_ms || 604800000,
    recovery_cooldown_ms: raw.recovery_cooldown_ms || 60000,
    service_name: raw.service_name || 'solana_subscriber',
    stream_subscription_state: raw.stream_subscription_state || 'subscriber_subscription_state',
    heartbeat_stream_key: raw.heartbeat_stream_key || 'system_heartbeat',
    commitment: raw.commitment || 'confirmed',
    subscription_verifier_interval_ms: raw.subscription_verifier_interval_ms || 60000,
    recovery_max_age_ms: raw.recovery_max_age_ms || 300000,
    configVersion: raw.updated_at || new Date().toISOString(), // üíæ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Å–∏—é
  });

  try {
    await sharedLogger({
      service: currentConfig.service_name,
      level: 'info',
      message: 'üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ë–î',
    });
  } catch (_) {}

  return currentConfig;
}

/**
 * üí° –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.
 * –ë—Ä–æ—Å–∞–µ—Ç –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.
 */
export function getCurrentConfig() {
  if (!currentConfig) {
    throw new Error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π loadSubscriberConfig() —Å–Ω–∞—á–∞–ª–∞.');
  }
  return currentConfig;
}

/**
 * üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ —É–∂–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
 * –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ health-—á–µ–∫ –∏–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
export function isConfigLoaded() {
  return !!currentConfig;
}

/**
 * üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ë–î.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { old, updated } ‚Äî –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.
 */
export async function updateAndReloadConfig() {
  const old = currentConfig;
  const updated = await loadSubscriberConfig();

  try {
    await sharedLogger({
      service: updated.service_name,
      level: 'info',
      message: '‚ôªÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ë–î –ø–æ –∫–æ–º–∞–Ω–¥–µ update_config',
    });
  } catch (_) {}

  return { old, updated };
}


/services/solana_subscriber/config/redisConsumer.js:
// services/solana_subscriber/config/redisConsumer.js

// ‚úÖ –ì–û–¢–û–í

// üì¶ –†–∞–±–æ—Ç–∞ —Å Redis Stream: –ø–æ–¥–ø–∏—Å–∫–∞, ack, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
import {
  consumeFromStream,
  ackMessage,
  recoverAllPendingMessages,
} from '../../../utils/redisStreamBus.js';

// ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
import {
  subscribeToAccount,
  unsubscribeFromAccount,
  resubscribeAll,
} from '../subscription/subscriptionManager.js';

// üîÅ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
import { updateAndReloadConfig } from './configLoader.js';

// üì¢ –û–±—â–∏–π –ª–æ–≥–≥–µ—Ä
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from './configLoader.js';

// ‚öôÔ∏è –û—á–µ—Ä–µ–¥–∏
import {
  stopParseQueueWorker,
  startParseQueueWorker
} from '../queue/parseQueue.js';

// ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è payload
import { validateEvent } from '../../../utils/eventSchemas.js';

const SERVICE_NAME = getCurrentConfig().service_name;

/**
 * üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç Redis Consumer:
 * - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç pending
 * - –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
 */
export async function startRedisConsumer() {
  // üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  await recoverAllPendingMessages({
    consumer: SERVICE_NAME,
    maxPerStream: 1000,
    handler: async ({ type, payload }, meta) => {
      await processRedisCommand(type, payload);
      await ackMessage({ type, id: meta.id, serviceName: SERVICE_NAME });
    }
  });

  // üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥ (–≤—Å–µ —Ç—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö)
  const commandTypes = ['subscribe_command', 'unsubscribe_command', 'config_update_command'];

  for (const type of commandTypes) {
    await consumeFromStream({
      type,
      consumer: SERVICE_NAME,
      handler: async ({ type, payload }, meta) => {
        await processRedisCommand(type, payload);
        await ackMessage({ type, id: meta.id, serviceName: SERVICE_NAME });
      }
    });
  }
}

/**
 * üõë –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –±—É–¥—É—â–µ–µ
 */
export async function stopRedisConsumer() {
  // üîï
}

/**
 * üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ Redis Stream
 */
async function processRedisCommand(type, payload) {
  // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è payload –ø–æ —Å—Ö–µ–º–µ
  const { valid, missingFields } = validateEvent(type, payload);

  if (!valid) {
    await sharedLogger({
      service: SERVICE_NAME,
      level: 'warn',
      message: {
        type: 'invalid_payload',
        event: type,
        missingFields,
        payload,
      },
    });
    return;
  }

  // üì• –õ–æ–≥: –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞
  await sharedLogger({
    service: SERVICE_NAME,
    level: 'info',
    message: { type: `${type}_received`, payload },
  });

  switch (type) {
    /**
     * üìå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
     */
    case 'subscribe_command':
      if (payload.priority === true) {
        try {
          const { markAccountAsPrioritized } = await import('../queue/perAccountPublishQueueManager.js');
          markAccountAsPrioritized(payload.chain_id, payload.account);

          await sharedLogger({
            service: SERVICE_NAME,
            level: 'info',
            message: {
              type: 'subscribe_priority_marked',
              chain_id: payload.chain_id,
              account: payload.account,
            },
          });
        } catch (err) {
          await sharedLogger({
            service: SERVICE_NAME,
            level: 'error',
            message: {
              type: 'subscribe_priority_failed',
              error: err.message,
            },
          });
        }
      }

      await subscribeToAccount({
        chain_id: payload.chain_id,
        account: payload.account,
        last_signature: payload.last_signature,
        history_max_age_ms: payload.history_max_age_ms,
        priority: payload.priority === true,
      });
      break;

    /**
     * üõë –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    case 'unsubscribe_command':
      await unsubscribeFromAccount(`${payload.chain_id}:${payload.account}`);
      break;

    /**
     * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏
     */
    case 'config_update_command': {
      const { old, updated } = await updateAndReloadConfig();

      if (old.silence_threshold_ms !== updated.silence_threshold_ms) {
        await sharedLogger({
          service: updated.service_name,
          level: 'info',
          message: {
            type: 'silence_threshold_updated',
            from: old.silence_threshold_ms,
            to: updated.silence_threshold_ms,
          },
        });
      }

      if (old.parse_concurrency !== updated.parse_concurrency) {
        stopParseQueueWorker();
        startParseQueueWorker();

        await sharedLogger({
          service: updated.service_name,
          level: 'info',
          message: {
            type: 'parse_queue_concurrency_updated',
            from: old.parse_concurrency,
            to: updated.parse_concurrency,
          },
        });
      }

      const controlsChanged = JSON.stringify(old.control_accounts) !== JSON.stringify(updated.control_accounts);

      if (controlsChanged) {
        await resubscribeAll();

        await sharedLogger({
          service: updated.service_name,
          level: 'info',
          message: {
            type: 'control_accounts_updated',
            old: old.control_accounts,
            new: updated.control_accounts,
          },
        });
      }

      break;
    }
  }
}


/services/solana_subscriber/config/validateConfig.js:
// services/solana_subscriber/config/validateConfig.js

/**
 * ‚úÖ –ú–æ–¥—É–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã subscriber_config.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏, –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è config.
 *
 * üí° –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
 * - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∏–ø–æ–≤
 * - –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
 * - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, parse_concurrency >= 1)
 */

export function validateConfig(config) {
    const errors = [];
  
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç
    if (!config || typeof config !== 'object') {
      errors.push('config –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º');
      return { valid: false, errors };
    }
  
    // 2. rpc_endpoints ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –º–∞—Å—Å–∏–≤
    if (!Array.isArray(config.rpc_endpoints) || config.rpc_endpoints.length === 0) {
      errors.push('rpc_endpoints –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º');
    }
  
    // 3. control_accounts ‚Äî –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    if (!Array.isArray(config.control_accounts)) {
      errors.push('control_accounts –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫');
    }
  
    // 4. –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —á–∏—Å–ª–æ –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è)
    const numericFields = [
      'silence_threshold_ms',
      'queue_max_length',
      'rpc_timeout_ms',
      'parse_concurrency',
      'max_parse_duration_ms',
      'heartbeat_interval_ms',
      'default_history_max_age_ms',
      'recovery_cooldown_ms',
      'http_limit_per_sec',
      'ws_limit_per_sec',
    ];
  
    for (const key of numericFields) {
      const val = config[key];
      if (typeof val !== 'number' || val < 0 || Number.isNaN(val)) {
        errors.push(`${key} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º >= 0`);
      }
    }
  
    // 5. service_name ‚Äî —Å—Ç—Ä–æ–∫–∞
    if (typeof config.service_name !== 'string' || config.service_name.length === 0) {
      errors.push('service_name –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
    }
  
    // 6. stream_subscription_state ‚Äî —Å—Ç—Ä–æ–∫–∞
    if (typeof config.stream_subscription_state !== 'string' || config.stream_subscription_state.length === 0) {
      errors.push('stream_subscription_state –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
    }
  
    // 7. heartbeat_stream_key ‚Äî —Å—Ç—Ä–æ–∫–∞
    if (typeof config.heartbeat_stream_key !== 'string' || config.heartbeat_stream_key.length === 0) {
      errors.push('heartbeat_stream_key –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
    }
  
    // 8. commitment ‚Äî –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const allowedCommitments = ['processed', 'confirmed', 'finalized'];
    if (!allowedCommitments.includes(config.commitment)) {
      errors.push(`commitment –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: ${allowedCommitments.join(', ')}`);
    }
  
    return {
      valid: errors.length === 0,
      errors,
    };
  }
  

/services/solana_subscriber/db/db.js:
// services/solana_subscriber/db/db.js

// ‚úÖ –ì–û–¢–û–í

import pg from 'pg';
import promiseRetry from 'promise-retry';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from '../config/configLoader.js';
import { CONFIG } from '../../../utils/config/index.js'; // —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º

// üéØ –°–æ–∑–¥–∞—ë–º –æ–±—â–∏–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL
export const pool = new pg.Pool({
  connectionString: CONFIG.db.connectionString,
});

// üß† –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
let isInitialized = false;

/**
 * ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL.
 * 
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 * - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—É–ª
 * - –î–µ–ª–∞–µ—Ç –¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫ (—Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏)
 * - –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
 * - –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ —Ñ–∞—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–µ
 */
export async function initPostgres() {
  // ‚õî –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (isInitialized) return;

  try {
    // üîÅ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ (–¥–æ 5 —Ä–∞–∑)
    await promiseRetry(async (retry, attempt) => {
      try {
        const client = await pool.connect(); // üîå –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        client.release(); // üîì –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º

        // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await sharedLogger({
          service: getCurrentConfig().service_name,
          level: 'info',
          message: {
            type: 'postgres_connected',
            message: `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL (–ø–æ–ø—ã—Ç–∫–∞ #${attempt})`,
          },
        });

        isInitialized = true; // üß† –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ

      } catch (err) {
        // üü° –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É (warning, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        try {
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'warn',
            message: {
              type: 'postgres_connection_attempt_failed',
              attempt,
              error: err.message,
            },
          });
        } catch (_) {}

        retry(err); // üîÅ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
      }
    }, {
      retries: 5,
      minTimeout: 1000,
      maxTimeout: 5000,
    });

  } catch (err) {
    // ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'error',
        message: {
          type: 'postgres_connection_failed',
          error: err.message,
        },
      });
    } catch (_) {}

    process.exit(1); // ‚õî –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  }
}

/**
 * üõë –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL.
 * 
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 * - –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
 * - –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
 * - –ë–µ–∑–æ–ø–∞—Å–µ–Ω –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö
 */
export async function closePostgres() {
  // üîï –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–ª–∏—Å—å ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if (!isInitialized) return;

  try {
    await pool.end(); // üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'info',
      message: {
        type: 'postgres_disconnected',
        message: '–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç PostgreSQL',
      },
    });
  } catch (err) {
    // ‚ö†Ô∏è –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ (—á–µ—Ä–µ–∑ sharedLogger)
    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'warn',
        message: {
          type: 'postgres_disconnect_failed',
          error: err.message,
        },
      });
    } catch (_) {}
  }
}


/services/solana_subscriber/db/subscriberConfig.js:
// services/solana_subscriber/db/subscriberConfig.js

// ‚úÖ –ì–û–¢–û–í

// üì¶ –ò–º–ø–æ—Ä—Ç –ø—É–ª–∞ PostgreSQL –∏–∑ –º–æ–¥—É–ª—è db.js
import { pool } from './db.js';

// üì¢ –õ–æ–≥–≥–µ—Ä, –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Redis stream)
import { sharedLogger } from '../../../utils/sharedLogger.js';

// üß† –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ª–æ–≥–æ–≤
import { getCurrentConfig } from '../config/configLoader.js';

/**
 * üì° –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É `subscriber_config`, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω–∏—Ç—Å—è
 * JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ `solana_subscriber`.
 * 
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ `updated_at DESC`.
 */
export async function getSubscriberConfigFromDb() {
  // üìú SQL-–∑–∞–ø—Ä–æ—Å: –≤—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (–ø–æ –≤—Ä–µ–º–µ–Ω–∏) –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const query = `
    SELECT 
      rpc_endpoints,
      control_accounts,
      silence_threshold_ms,
      queue_max_length,
      rpc_timeout_ms,
      parse_concurrency,
      parse_queue_max_length,
      max_parse_duration_ms,
      heartbeat_interval_ms,
      default_history_max_age_ms,
      recovery_cooldown_ms,
      http_limit_per_sec,
      ws_limit_per_sec,
      service_name,
      stream_subscription_state,
      heartbeat_stream_key
    FROM subscriber_config
    ORDER BY updated_at DESC
    LIMIT 1;
  `;

  // üì• –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å
  const { rows } = await pool.query(query);

  // ‚ö†Ô∏è –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ‚Äî —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —Ñ–∞—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–æ–π
  if (!rows.length) {
    throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ subscriber_config');
  }

  // ‚úÖ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  try {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'info',
      message: {
        type: 'subscriber_config_loaded',
        preview: {
          updated_keys: Object.keys(rows[0]), // üîç –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ (–±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π)
        },
      },
    });
  } catch (_) {}

  // üì¶ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å)
  return rows[0];
}


/services/solana_subscriber/db/subscriptions.js:
// services/solana_subscriber/db/subscriptions.js

// ‚úÖ –ì–û–¢–û–í

// üì¶ –ò–º–ø–æ—Ä—Ç –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL
import { pool } from './db.js';

// üß† –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è sharedLogger)
import { getCurrentConfig } from '../config/configLoader.js';

// üì¢ –û–±—â–∏–π –ª–æ–≥–≥–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Redis stream
import { sharedLogger } from '../../../utils/sharedLogger.js';

/**
 * üîÅ –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `subscriptions`.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–∏—Å–∞, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏.
 */
export async function getActiveSubscriptions() {
  const { rows } = await pool.query(`
    SELECT chain_id, account, priority
    FROM subscriptions
    WHERE active = true
  `);

  return rows; // [{ chain_id, account, priority }]
}

/**
 * üíæ –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ `last_signature` –∏ –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ `updated_at`
 * –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (chain_id + account).
 */
export async function updateLastSignature(chain_id, account, signature) {
  await pool.query(
    `
    UPDATE subscriptions
    SET last_signature = $1,
        updated_at = NOW()
    WHERE chain_id = $2 AND account = $3
    `,
    [signature, chain_id, account]
  );
}

/**
 * üßæ –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É (`last_signature`)
 * –¥–ª—è –ø–∞—Ä—ã `chain_id:account`. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.
 */
export async function getLastSignatureForAccount(chain_id, account) {
  const { rows } = await pool.query(
    `
    SELECT last_signature FROM subscriptions
    WHERE chain_id = $1 AND account = $2
    `,
    [chain_id, account]
  );

  return rows[0]?.last_signature || null;
}

/**
 * üîÅ –í—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.
 * 
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 * - –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Üí –≤—Å—Ç–∞–≤–∫–∞ (`INSERT`)
 * - –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (`UPDATE`)
 * 
 * –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç `active = true`.
 */
export async function upsertSubscription({
  chain_id,
  account,
  last_signature,
  history_max_age_ms,
  priority
}) {
  try {
    // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const existing = await pool.query(
      `SELECT * FROM subscriptions WHERE chain_id = $1 AND account = $2`,
      [chain_id, account]
    );

    // üü¢ –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    if (existing.rows.length === 0) {
      await pool.query(
        `
        INSERT INTO subscriptions (
          chain_id, account, active, last_signature, history_max_age_ms, priority
        ) VALUES ($1, $2, true, $3, $4, $5)
        `,
        [
          chain_id,
          account,
          last_signature,
          history_max_age_ms,
          priority === true
        ]
      );

      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'info',
        message: {
          type: 'subscription_inserted',
          chain_id,
          account,
          last_signature,
          history_max_age_ms,
          priority: priority === true,
        },
      });

    } else {
      // üü° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
      const updates = [];
      const values = [chain_id, account];
      let paramIndex = 3;

      if (last_signature !== undefined) {
        updates.push(`last_signature = $${paramIndex++}`);
        values.push(last_signature);
      }

      if (history_max_age_ms !== undefined) {
        updates.push(`history_max_age_ms = $${paramIndex++}`);
        values.push(history_max_age_ms);
      }

      if (priority !== undefined) {
        updates.push(`priority = $${paramIndex++}`);
        values.push(priority === true);
      }

      updates.push(`active = true`);
      updates.push(`updated_at = CURRENT_TIMESTAMP`);

      await pool.query(
        `
        UPDATE subscriptions
        SET ${updates.join(', ')}
        WHERE chain_id = $1 AND account = $2
        `,
        values
      );

      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'info',
        message: {
          type: 'subscription_updated',
          chain_id,
          account,
          updated_fields: updates,
        },
      });
    }

  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'error',
      message: {
        type: 'upsert_subscription_failed',
        chain_id,
        account,
        error: err.message,
      },
    });

    throw err;
  }
}

/**
 * üîª –ü–æ–º–µ—á–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é (active = false).
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.
 */
export async function deactivateSubscription({ chain_id, account }) {
  try {
    await pool.query(
      `
      UPDATE subscriptions
      SET active = false,
          updated_at = NOW()
      WHERE chain_id = $1 AND account = $2
      `,
      [chain_id, account]
    );

    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'info',
      message: {
        type: 'subscription_deactivated',
        chain_id,
        account,
      },
    });

  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'error',
      message: {
        type: 'deactivate_subscription_failed',
        chain_id,
        account,
        error: err.message,
      },
    });

    throw err;
  }
}


/services/solana_subscriber/index.js:
import { start, shutdown } from './start.js';

process.on('SIGINT', shutdown);
process.on('SIGTERM', shutdown);

start();


/services/solana_subscriber/queue/parseQueue.js:
// services/solana_subscriber/queue/parseQueue.js

// ‚úÖ –ì–û–¢–û–í

/**
 * üß† –û—á–µ—Ä–µ–¥—å –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º (txid), –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.
 *
 * üí° –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞:
 * - –≤–º–µ—Å—Ç–æ sleep(200) –ø—Ä–∏ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏ ‚Äî –≤–æ—Ä–∫–µ—Ä—ã "–∑–∞—Å—ã–ø–∞—é—Ç"
 * - –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ ‚Äî "–±—É–¥–∏–º" –≤–æ—Ä–∫–µ—Ä—ã —á–µ—Ä–µ–∑ Promise
 */

import { getParsedTransactionWithTimeout } from '../rpc/rpcUtils.js';
import { getCurrentConfig } from '../config/configLoader.js';
import { enqueueTransaction } from './publishQueue.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { sleep } from '../../../utils/sleep.js';

// üì¶ –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
const queue = [];

// üèÉ‚Äç‚ôÇÔ∏è –°—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–æ–≤
let isRunning = false;

// üî¢ –°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
let runningTasks = 0;

// üîî –ú–µ—Ö–∞–Ω–∏–∑–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞)
let resolver = null;
let waitForNewTask = new Promise((res) => {
  resolver = res;
});

/**
 * üì• –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –±—É–¥–∏—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ "—Å–ø—è—Ç".
 *
 * @param {Object} task - –æ–±—ä–µ–∫—Ç { chain_id, account, signature, enqueuedAt? }
 */
export function enqueueSignature(task) {
  if (!task.enqueuedAt) {
    task.enqueuedAt = Date.now();
  }

  queue.push(task);

  // ‚è∞ –ë—É–¥–∏–º –≤–æ—Ä–∫–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –æ–∂–∏–¥–∞–ª–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
  if (resolver) {
    resolver(); // –ø—Ä–æ–±—É–∂–¥–∞–µ–º
    resolver = null;
    waitForNewTask = new Promise((res) => {
      resolver = res; // —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    });
  }
}

/**
 * üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç N –≤–æ—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏.
 * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º parse_concurrency –∏–∑ config.
 */
export function startParseQueueWorker() {
  if (isRunning) return;
  isRunning = true;

  const concurrency = getCurrentConfig().parse_concurrency || 3;

  for (let i = 0; i < concurrency; i++) {
    runWorkerLoop(); // üîÅ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π –≤–æ—Ä–∫–µ—Ä
  }
}

/**
 * üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –≤–æ—Ä–∫–µ—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞).
 */
export function stopParseQueueWorker() {
  isRunning = false;
}

/**
 * üîÅ –í–æ—Ä–∫–µ—Ä:
 * - –∑–∞–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞—á—É
 * - –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á ‚Äî –∂–¥—ë—Ç, –ø–æ–∫–∞ –ø—Ä–∏–¥—ë—Ç –Ω–æ–≤–∞—è
 * - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
 */
async function runWorkerLoop() {
  while (isRunning) {
    const task = queue.shift();

    if (!task) {
      await waitForNewTask; // üí§ –∂–¥—ë–º, –ø–æ–∫–∞ –ø–æ—Å—Ç—É–ø–∏—Ç –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
      continue;
    }

    runningTasks++;

    try {
      await handleSignatureTask(task);
    } catch (err) {
      try {
        await sharedLogger({
          service: getCurrentConfig().service_name,
          level: 'error',
          message: {
            type: 'parse_queue_crash',
            error: err.message,
          },
        });
      } catch (_) {}
    }

    runningTasks--;
  }
}

/**
 * ‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å–∏–≥–Ω–∞—Ç—É—Ä—É:
 * - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç "—Å–≤–µ–∂–µ—Å—Ç—å"
 * - –¥–µ–ª–∞–µ—Ç getParsedTransaction —Å —Ç–∞–π–º–∞—É—Ç–æ–º
 * - –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ ‚Äî –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ publishQueue
 * - –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
 */
async function handleSignatureTask(task) {
  const config = getCurrentConfig();
  const maxAge = config.max_parse_duration_ms || 86400000;
  const now = Date.now();

  // ‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è
  if (now - task.enqueuedAt > maxAge) {
    try {
      await sharedLogger({
        service: config.service_name,
        level: 'warn',
        message: {
          type: 'unresolved_transaction',
          signature: task.signature,
          reason: 'max_age_exceeded',
        },
      });
    } catch (_) {}
    return;
  }

  try {
    const rpc = await import('../rpc/rpcPool.js').then(mod => mod.getAvailableRpc());
    if (!rpc) {
      enqueueSignature(task); // retry –ø–æ–∑–∂–µ
      return;
    }

    if (!rpc.httpLimiter.removeToken()) {
      enqueueSignature(task); // –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω ‚Äî retry
      await sleep(100);
      return;
    }

    const parsed = await getParsedTransactionWithTimeout(rpc, task.signature);
    if (!parsed) {
      enqueueSignature(task); // –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî retry
      return;
    }

    const blockTime = parsed.blockTime || null;
    const timestamp = blockTime ? blockTime * 1000 : Date.now();

    const message = {
      chain_id: task.chain_id,
      account: task.account,
      signature: task.signature,
      log: parsed,
      blockTime,
      timestamp,
    };

    enqueueTransaction(message); // ‚úÖ –ø–µ—Ä–µ–¥–∞—ë–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é

  } catch (err) {
    enqueueSignature(task); // –æ—à–∏–±–∫–∞ ‚Üí retry
  }
}


/services/solana_subscriber/queue/perAccountPublishQueueManager.js:
// services/solana_subscriber/queue/perAccountPublishQueueManager.js

// ‚úÖ –ì–û–¢–û–í

/**
 * üß© –ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
 * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–æ–∑–¥–∞—ë—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∏ –≤–æ—Ä–∫–µ—Ä.
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
 * - –æ–±—Ö–æ–¥–∏—Ç—å –ª–∏–º–∏—Ç—ã
 * - –∏–∑–æ–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç –æ–±—â–µ–π –æ—á–µ—Ä–µ–¥–∏
 * - –¥–∞–≤–∞—Ç—å "VIP" –∞–∫–∫–∞—É–Ω—Ç–∞–º —É—Å–∫–æ—Ä–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
 */

import { getParsedTransactionWithTimeout } from '../rpc/rpcUtils.js';
import { enqueueTransaction } from './publishQueue.js';
import { getCurrentConfig } from '../config/configLoader.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { sleep } from '../../../utils/sleep.js';

// üìå –ê–∫–∫–∞—É–Ω—Ç—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
const prioritizedAccounts = new Set(); // key = `${chain_id}:${account}`

// üì¶ –û—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
const accountQueues = new Map();       // key ‚Üí [{...}]

// üåÄ –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–æ–≤ (–∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ—Ç)
const isRunningMap = new Map();        // key ‚Üí boolean

// üîî –ü—Ä–æ–º–∏—Å—ã –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É
const queueResolvers = new Map();      // key ‚Üí resolver (–±—É–¥–∏–ª—å–Ω–∏–∫)
const queueWaiters = new Map();        // key ‚Üí Promise (–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏)

/**
 * ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π.
 * –°–æ–∑–¥–∞—ë—Ç –æ—á–µ—Ä–µ–¥—å –∏ –≤–æ—Ä–∫–µ—Ä, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
 */
export function markAccountAsPrioritized(chain_id, account) {
  const key = `${chain_id}:${account}`;
  prioritizedAccounts.add(key);

  if (!accountQueues.has(key)) {
    accountQueues.set(key, []);
    isRunningMap.set(key, false);

    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ö–∞–Ω–∏–∑–º –æ–∂–∏–¥–∞–Ω–∏—è
    queueWaiters.set(key, new Promise(res => queueResolvers.set(key, res)));

    startPerAccountWorker(chain_id, account);
  }
}

/**
 * üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º
 */
export function isPrioritized(chain_id, account) {
  return prioritizedAccounts.has(`${chain_id}:${account}`);
}

/**
 * üì• –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export function enqueueToPerAccountPublishQueue(task) {
  const key = `${task.chain_id}:${task.account}`;
  const queue = accountQueues.get(key);
  if (!queue) return;

  if (!task.enqueuedAt) {
    task.enqueuedAt = Date.now();
  }

  queue.push(task);

  // üõéÔ∏è –ë—É–¥–∏–º –≤–æ—Ä–∫–µ—Ä, –µ—Å–ª–∏ –æ–Ω –∂–¥—ë—Ç
  const resolver = queueResolvers.get(key);
  if (resolver) {
    resolver();
    queueResolvers.set(key, null);
    queueWaiters.set(key, new Promise(res => queueResolvers.set(key, res)));
  }
}

/**
 * üöÄ –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
 */
function startPerAccountWorker(chain_id, account) {
  const key = `${chain_id}:${account}`;
  if (isRunningMap.get(key)) return;
  isRunningMap.set(key, true);

  const queue = accountQueues.get(key);
  const maxAge = getCurrentConfig().max_parse_duration_ms || 86400000;

  (async function loop() {
    while (true) {
      const task = queue.shift();

      // üí§ –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –∂–¥—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
      if (!task) {
        await queueWaiters.get(key);
        continue;
      }

      const now = Date.now();
      if (now - task.enqueuedAt > maxAge) {
        try {
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'warn',
            message: {
              type: 'unresolved_transaction_priority',
              signature: task.signature,
              chain_id: task.chain_id,
              account: task.account,
              reason: 'max_age_exceeded',
            },
          });
        } catch (_) {}
        continue;
      }

      try {
        const rpc = await import('../rpc/rpcPool.js').then(mod => mod.getAvailableRpc());
        if (!rpc) {
          queue.push(task);
          continue;
        }

        if (!rpc.httpLimiter.removeToken()) {
          queue.push(task);
          await sleep(100);
          continue;
        }

        const parsed = await getParsedTransactionWithTimeout(rpc, task.signature);
        if (!parsed) {
          queue.push(task);
          continue;
        }

        const blockTime = parsed.blockTime || null;
        const timestamp = blockTime ? blockTime * 1000 : Date.now();

        const message = {
          chain_id: task.chain_id,
          account: task.account,
          signature: task.signature,
          log: parsed,
          blockTime,
          timestamp,
        };

        enqueueTransaction(message);
      } catch (err) {
        queue.push(task);
        try {
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'error',
            message: {
              type: 'priority_worker_failed',
              signature: task.signature,
              chain_id: task.chain_id,
              account: task.account,
              error: err.message,
            },
          });
        } catch (_) {}
      }
    }
  })();
}


/services/solana_subscriber/queue/publishQueue.js:
// services/solana_subscriber/queue/publishQueue.js

// ‚úÖ –ì–û–¢–û–í

/**
 * üì§ –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ Redis Stream.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * - –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏—è `transaction_published`
 * - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ last_signature –≤ –ë–î
 * - –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
 */

import { publishToStream } from '../../../utils/redisStreamBus.js';
import { updateLastSignature } from '../db/subscriptions.js';
import { setPendingUpdate } from './signatureUpdateBuffer.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from '../config/configLoader.js';

// üì¶ –û—á–µ—Ä–µ–¥—å –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á
const queue = [];

// üîÉ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Ä–∫–µ—Ä–∞
let isRunning = false;

// üîî –ú–µ—Ö–∞–Ω–∏–∑–º –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
let resolver = null;
let waitForNewTask = new Promise((res) => {
  resolver = res;
});

/**
 * üì• –°—Ç–∞–≤–∏—Ç –≥–æ—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 */
export function enqueueTransaction(message) {
  queue.push(message);

  // üõéÔ∏è –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä "—Å–ø–∏—Ç", –±—É–¥–∏–º –µ–≥–æ
  if (resolver) {
    resolver();
    resolver = null;
    waitForNewTask = new Promise((res) => {
      resolver = res;
    });
  }
}

/**
 * üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
 */
export function startPublishQueueWorker() {
  if (isRunning) return;
  isRunning = true;
  workerLoop();
}

/**
 * üîÅ –í–æ—Ä–∫–µ—Ä:
 * - –∂–¥—ë—Ç –ø–æ—è–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á
 * - –ø—É–±–ª–∏–∫—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç last_signature
 * - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
 */
async function workerLoop() {
  while (isRunning) {
    const task = queue.shift();

    if (!task) {
      await waitForNewTask; // üí§ –∂–¥—ë–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
      continue;
    }

    try {
      // 1Ô∏è‚É£ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
      await publishToStream({
        service: getCurrentConfig().service_name,
        type: 'transaction_published',
        payload: task,
      });

      // 2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É
      try {
        await updateLastSignature(task.chain_id, task.account, task.signature);
      } catch (err) {
        setPendingUpdate(task.chain_id, task.account, task.signature);
        await sharedLogger({
          service: getCurrentConfig().service_name,
          level: 'warn',
          message: {
            type: 'update_signature_failed',
            signature: task.signature,
            error: err.message,
          },
        });
      }

      // 3Ô∏è‚É£ –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'info',
        message: {
          type: 'transaction_published',
          signature: task.signature,
          chain_id: task.chain_id,
        },
      });

    } catch (err) {
      // 4Ô∏è‚É£ –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚Üí retry
      queue.push(task);
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'error',
        message: {
          type: 'stream_publish_failed',
          signature: task.signature,
          error: err.message,
        },
      });
    }
  }
}


/services/solana_subscriber/queue/signatureUpdateBuffer.js:
// services/solana_subscriber/queue/signatureUpdateBuffer.js

// ‚úÖ –ì–û–¢–û–í

/**
 * –ú–æ–¥—É–ª—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é `last_signature` –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å `updateLastSignature(...)` ‚Äî
 * –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–±–æ—è PostgreSQL.
 *
 * –ó–∞–¥–∞—á–∏ –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è ‚Äî –æ–Ω–∏ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –±—É—Ñ–µ—Ä, –∏ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞.
 */

import { updateLastSignature } from '../db/subscriptions.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from '../config/configLoader.js';

// üì¶ –ë—É—Ñ–µ—Ä –∑–∞–¥–∞—á: key = `${chain_id}:${account}` ‚Üí signature
const bufferMap = new Map();

// üö© –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∞
let isRunning = false;

// üîî –°–∏–≥–Ω–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º "–æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"
let notifyResolve = null;

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –≤ –±—É—Ñ–µ—Ä.
 * –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ.
 * –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –∂–¥—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É ‚Äî —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏.
 */
export function setPendingUpdate(chain_id, account, signature) {
  const key = `${chain_id}:${account}`;
  bufferMap.set(key, signature);

  // –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –±—É–¥–∏–º –µ–≥–æ
  if (notifyResolve) {
    notifyResolve();
    notifyResolve = null;
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
  if (!isRunning) {
    startSignatureUpdateWorker();
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω.
 * –í–æ—Ä–∫–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ–∫–∞ alive.
 */
export function startSignatureUpdateWorker() {
  if (isRunning) return;
  isRunning = true;
  loop();
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞.
 *
 * –õ–æ–≥–∏–∫–∞:
 * - –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç ‚Äî –≤–æ—Ä–∫–µ—Ä "—Å–ø–∏—Ç", –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (await Promise)
 * - –µ—Å–ª–∏ –≤ –±—É—Ñ–µ—Ä–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ ‚Äî –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏—Ö –∏ –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å `last_signature`
 * - –ø—Ä–∏ —É—Å–ø–µ—Ö–µ ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞
 * - –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
 */
async function loop() {
  while (isRunning) {
    const entries = Array.from(bufferMap.entries());

    // üí§ –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç ‚Äî –∂–¥—ë–º –ø—Ä–∏—Ö–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    if (entries.length === 0) {
      await new Promise(resolve => (notifyResolve = resolve));
      continue;
    }

    // üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –≤ –±—É—Ñ–µ—Ä–µ
    for (const [key, signature] of entries) {
      const [chain_id, account] = key.split(':');

      try {
        // ‚¨ÜÔ∏è –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å last_signature –≤ –±–∞–∑–µ
        await updateLastSignature(chain_id, account, signature);

        // ‚úÖ –£—Å–ø–µ—à–Ω–æ ‚Äî —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±—É—Ñ–µ—Ä–∞
        bufferMap.delete(key);

        try {
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'info',
            message: {
              type: 'signature_updated',
              chain_id,
              account,
              signature,
            },
          });
        } catch (_) {}

      } catch (err) {
        // ‚ö†Ô∏è –û—à–∏–±–∫–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±—É—Ñ–µ—Ä–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        try {
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'warn',
            message: {
              type: 'signature_sync_failed',
              chain_id,
              account,
              signature,
              error: err.message,
            },
          });
        } catch (_) {}
      }
    }

    // üîÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É: –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –±—É–¥–µ—Ç –ø—É—Å—Ç ‚Äî —Å–Ω–æ–≤–∞ –∂–¥—ë–º –∑–∞–¥–∞—á—É
  }
}


/services/solana_subscriber/rpc/rpcLimiter.js:
// services/solana_subscriber/rpc/rpcLimiter.js

// ‚úÖ –ì–û–¢–û–í

/**
 * üß† –≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º token bucket (—Ç–æ–∫–µ–Ω-–±–∞–∫–µ—Ç),
 * –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ RPC-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É.
 *
 * üîÑ –õ–æ–≥–∏–∫–∞:
 *   - –í –Ω–∞—á–∞–ª–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (1 —Å–µ–∫—É–Ω–¥–∞) –≤ "–±–∞–∫–µ" maxRequestsPerSec —Ç–æ–∫–µ–Ω–æ–≤.
 *   - –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ removeToken() –∑–∞–±–∏—Ä–∞–µ—Ç 1 —Ç–æ–∫–µ–Ω.
 *   - –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –∑–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è (false).
 *   - –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –±–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ –º–∞–∫—Å–∏–º—É–º–∞.
 *
 * üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
 *   - HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (getParsedTransaction)
 *   - WebSocket-—Å–æ–±—ã—Ç–∏–π (onLogs)
 * 
 * üìå –ù–µ–∑–∞–≤–∏—Å–∏–º–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ RPC –∫–ª–∏–µ–Ω—Ç–∞:
 *   - httpLimiter ‚Äî –≤ parseQueue / recovery
 *   - wsLimiter   ‚Äî –≤ onLogsHandler
 */

/**
 * üõ† –°–æ–∑–¥–∞—ë—Ç –ª–∏–º–∏—Ç–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É.
 * 
 * @param {number} maxRequestsPerSec - –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
 * @returns {{
*   removeToken: () => boolean,
*   stop: () => void
* }}
*/
export function createLimiter(maxRequestsPerSec) {
 // ü™ô –°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ (–∑–∞–ø—Ä–æ—Å–æ–≤) –æ—Å—Ç–∞–ª–æ—Å—å –≤ —Ç–µ–∫—É—â–µ–º –æ–∫–Ω–µ
 let tokens = maxRequestsPerSec;

 // ‚è± –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –æ–±–Ω—É–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ –≤—ã–¥–∞—ë–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
 const interval = setInterval(() => {
   tokens = maxRequestsPerSec;
 }, 1000);

 return {
   /**
    * üîÑ –ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å).
    * @returns {boolean} - true –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ, false –µ—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
    */
   removeToken() {
     if (tokens > 0) {
       tokens--;
       return true;
     }
     return false;
   },

   /**
    * üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã RPC).
    */
   stop() {
     clearInterval(interval);
   },
 };
}


/services/solana_subscriber/rpc/rpcPool.js:
// services/solana_subscriber/rpc/rpcPool.js

// ‚úÖ –ì–û–¢–û–í

/**
 * –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–ª–æ–º RPC-–∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è Solana.
 *
 * üí° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
 * - —Ä–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ RPC-—ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
 * - –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (HTTP –∏ WebSocket)
 * - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */

import { Connection } from '@solana/web3.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from '../config/configLoader.js';
import { sendSubscriptionStateUpdate } from '../utils/subscriptionStatePublisher.js';
import { resubscribeAll } from '../subscription/subscriptionManager.js';
import { createLimiter } from './rpcLimiter.js';

const rpcPool = []; // üß† –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö RPC –∫–ª–∏–µ–Ω—Ç–æ–≤
let reconnectInProgress = false; // üîê —Ñ–ª–∞–≥ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ reconnect

/**
 * ‚öôÔ∏è –°–æ–∑–¥–∞—ë—Ç RPC-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å HTTP –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) WebSocket
 * 
 * @param {string} httpUrl - URL HTTP RPC (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * @param {string|null} wsUrl - URL WebSocket RPC (–µ—Å–ª–∏ –µ—Å—Ç—å)
 * @returns {Connection}
 */
function connectionFactory(httpUrl, wsUrl = null) {
  return new Connection(httpUrl, {
    commitment: 'confirmed',
    ...(wsUrl ? { wsEndpoint: wsUrl } : {}), // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ WS –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
  });
}

/**
 * üîÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ RPC –∫–ª–∏–µ–Ω—Ç–æ–≤.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å–ª–µ —Å–±–æ—è.
 * 
 * @param {Array} endpoints - —Å–ø–∏—Å–æ–∫ RPC-–æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ subscriber_config
 */
export async function initRpcPool(endpoints) {
  rpcPool.length = 0; // –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø—É–ª

  const {
    http_limit_per_sec = 10,
    ws_limit_per_sec = 5,
  } = getCurrentConfig(); // –ª–∏–º–∏—Ç—ã –∏–∑ –±–∞–∑—ã

  for (let i = 0; i < endpoints.length; i++) {
    const endpoint = endpoints[i];
    const rpcId = `rpc-${i + 1}`;

    // üß∞ –ª–∏–º–∏—Ç–µ—Ä—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç rate limit
    const httpLimiter = createLimiter(http_limit_per_sec);
    const wsLimiter = createLimiter(ws_limit_per_sec);

    // üåê —Å–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const httpConn = connectionFactory(endpoint.http);
    const wsConn = connectionFactory(endpoint.http, endpoint.ws);

    rpcPool.push({
      id: rpcId,
      httpConn,
      wsConn,
      httpLimiter,
      wsLimiter,
    });

    // üì° –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è WS
    const ws = wsConn._rpcWebSocket;
    if (ws) {
      ws.rpcId = rpcId;
      ws.on('close', () => handleDisconnect(rpcId));
      ws.on('error', () => handleDisconnect(rpcId));
    }
  }
}

/**
 * üé≤ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π RPC –∫–ª–∏–µ–Ω—Ç.
 * –°–µ–π—á–∞—Å ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π. –ü—Ä–∏ –æ–¥–Ω–æ–º RPC ‚Äî –≤—Å–µ–≥–¥–∞ –æ–Ω.
 */
export function getAvailableRpc() {
  if (!rpcPool.length) return null;
  return rpcPool[Math.floor(Math.random() * rpcPool.length)];
}

/**
 * üìã –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ RPC –∫–ª–∏–µ–Ω—Ç—ã (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
 */
export function getAllRpcClients() {
  return rpcPool;
}

/**
 * üì° –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫)
 */
export function getWsConnections() {
  return rpcPool.map(rpc => rpc.wsConn);
}

/**
 * üßπ –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ RPC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—á–∏—â–∞–µ—Ç –ø—É–ª.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ reconnect –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã.
 */
export async function closeRpcPool() {
  for (const rpc of rpcPool) {
    rpc.httpLimiter?.stop?.();
    rpc.wsLimiter?.stop?.();

    try {
      await rpc.wsConn._rpcWebSocket?.close(); // –∑–∞–∫—Ä—ã–≤–∞–µ–º WS
    } catch (_) {}
  }
  rpcPool.length = 0;
}

/**
 * ‚ôªÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
 * üîê –ó–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ —á–µ—Ä–µ–∑ reconnectInProgress.
 * 
 * - –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * - –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –ø—É–ª
 * - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
 */
export async function handleDisconnect(rpcId) {
  if (reconnectInProgress) {
    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'warn',
        message: {
          type: 'duplicate_disconnect_skipped',
          rpc_id: rpcId,
        },
      });
    } catch (_) {}
    return;
  }

  reconnectInProgress = true;

  try {
    // ‚ö†Ô∏è –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'warn',
      message: {
        type: 'ws_disconnect',
        rpc_id: rpcId,
      },
    });

    // üßπ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ RPC
    await closeRpcPool();

    // üîÅ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
    const { rpc_endpoints } = getCurrentConfig();
    await initRpcPool(rpc_endpoints);

    // ‚ôªÔ∏è –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫–∏
    await resubscribeAll();

    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'info',
      message: {
        type: 'reconnect',
        rpc_id: rpcId,
      },
    });

  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'error',
      message: {
        type: 'reconnect_failed',
        rpc_id: rpcId,
        error: err.message,
      },
    });
  } finally {
    reconnectInProgress = false;
  }
}


/services/solana_subscriber/rpc/rpcUtils.js:
// services/solana_subscriber/rpc/rpcUtils.js

// ‚úÖ –ì–û–¢–û–í

/**
 * üì¶ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Solana RPC —á–µ—Ä–µ–∑ web3.js
 *
 * üí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–∞–π–º–∞—É—Ç)
 * - –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ RPC –æ—à–∏–±–æ–∫ (—Å —É–∫–∞–∑–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ –∏ rpc_id)
 * - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ `commitment` (—Ç–æ–ª—å–∫–æ –≤ getParsedTransaction)
 */

import { getCurrentConfig } from '../config/configLoader.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { withAbortTimeout } from '../../../utils/withAbortTimeout.js';

/**
 * üîç –ü–æ–ª—É—á–∞–µ—Ç `ParsedTransaction` –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
 *
 * @param {object} rpc - –æ–±—ä–µ–∫—Ç RPC –∏–∑ –ø—É–ª–∞ (httpConn, id –∏ —Ç.–¥.)
 * @param {string} signature - —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (txid)
 * @returns {Promise<ParsedTransaction | null>}
 */
export async function getParsedTransactionWithTimeout(rpc, signature) {
  const config = getCurrentConfig();
  const timeoutMs = config.rpc_timeout_ms || 5000;
  const commitment = config.commitment || 'confirmed';

  try {
    return await withAbortTimeout(async (_signal) => {
      return await rpc.httpConn.getParsedTransaction(signature, {
        commitment,
        maxSupportedTransactionVersion: 0,
      });
    }, timeoutMs);
  } catch (err) {
    try {
      await sharedLogger({
        service: config.service_name,
        level: 'warn',
        message: {
          type: 'rpc_timeout',
          rpc_id: rpc.id,
          method: 'getParsedTransaction',
          signature,
          error: err.message,
        },
      });
    } catch (_) {}
    return null;
  }
}

/**
 * üìú –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∏–≥–Ω–∞—Ç—É—Ä –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º).
 *
 * @param {object} rpc - RPC-–∫–ª–∏–µ–Ω—Ç –∏–∑ –ø—É–ª–∞
 * @param {string | PublicKey} address - –∞–¥—Ä–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞
 * @param {object} options - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: { limit, before, until }
 * @returns {Promise<Array<ConfirmedSignatureInfo> | null>}
 */
export async function getSignaturesForAddressWithTimeout(rpc, address, options = {}) {
  const config = getCurrentConfig();
  const timeoutMs = config.rpc_timeout_ms || 5000;

  try {
    return await withAbortTimeout(async (_signal) => {
      return await rpc.httpConn.getSignaturesForAddress(address, options);
    }, timeoutMs);
  } catch (err) {
    try {
      await sharedLogger({
        service: config.service_name,
        level: 'warn',
        message: {
          type: 'rpc_timeout',
          rpc_id: rpc.id,
          method: 'getSignaturesForAddress',
          address: address.toBase58?.() || address,
          error: err.message,
        },
      });
    } catch (_) {}
    return null;
  }
}


/services/solana_subscriber/start.js:
// services/solana_subscriber/start.js

// üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –ë–î
import { initPostgres, closePostgres } from './db/db.js';

// üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import { loadSubscriberConfig, getCurrentConfig } from './config/configLoader.js';

// üîå RPC
import { initRpcPool, closeRpcPool } from './rpc/rpcPool.js';

// üì° –ü–æ–¥–ø–∏—Å–∫–∏
import {
  startAllSubscriptions,
  stopAllSubscriptions,
} from './subscription/subscriptionManager.js';

// üßæ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ –ë–î
import { getActiveSubscriptions } from './db/subscriptions.js';

// üîÑ –û—á–µ—Ä–µ–¥–∏
import { startParseQueueWorker } from './queue/parseQueue.js';
import { startPublishQueueWorker } from './queue/publishQueue.js';
import { startSignatureUpdateWorker } from './queue/signatureUpdateBuffer.js';

// üì¨ Redis consumer (–∫–æ–º–∞–Ω–¥—ã)
import {
  startRedisConsumer,
  stopRedisConsumer,
} from './config/redisConsumer.js';

// ‚ù§Ô∏è Heartbeat –≤ Redis
import { startHeartbeat, stopHeartbeat } from '../../utils/heartbeat.js';

// üîå Redis client (singleton)
import { getRedisClient, disconnectRedisClient } from '../../utils/redisClientSingleton.js';

// üì¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import { sharedLogger } from '../../utils/sharedLogger.js';

// üß† –ù–æ–≤—ã–π —à–∞–≥ ‚Äî –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–µ N –º—Å —Å–≤–µ—Ä—è–µ—Ç WS-–ø–æ–¥–ø–∏—Å–∫–∏)
import { startWsSubscriptionVerifier, stopWsSubscriptionVerifier } from './subscription/wsSubscriptionVerifier.js';

// üîê –§–ª–∞–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
let shuttingDown = false;

/**
 * üöÄ –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ `solana_subscriber`
 */
export async function start() {
  try {
    // 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å!)
    try {
      await loadSubscriberConfig(); // –Ω—É–∂–Ω–æ –¥–ª—è getCurrentConfig()
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'info',
        message: '‚öô –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞...',
      });
    } catch (err) {
      // –ï—Å–ª–∏ sharedLogger —Å–∞–º –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî fallback –ª–æ–≥
      try {
        await sharedLogger({
          service: 'solana_subscriber',
          level: 'error',
          message: {
            type: 'shared_logger_init_failed',
            error: err.message,
          },
        });
      } catch (_) {}
      process.exit(1);
      return;
    }

    // 2Ô∏è‚É£ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    await getRedisClient();      // Redis
    await initPostgres();        // PostgreSQL

    // 3Ô∏è‚É£ RPC
    const config = getCurrentConfig();
    await initRpcPool(config.rpc_endpoints);

    // 4Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–∞–∑—ã
    const subscriptions = await getActiveSubscriptions();
    if (subscriptions?.length) {
      await startAllSubscriptions(subscriptions);
    }

    // 5Ô∏è‚É£ –û—á–µ—Ä–µ–¥–∏ + –≤–æ—Ä–∫–µ—Ä—ã
    await startRedisConsumer();       // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    startParseQueueWorker();          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä
    startPublishQueueWorker();        // –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    startSignatureUpdateWorker();     // –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ updateLastSignature

    // 6Ô∏è‚É£ ‚ù§Ô∏è Heartbeat –≤ Redis
    await startHeartbeat(config.service_name);

    // 7Ô∏è‚É£ üß† –í–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä WebSocket-–ø–æ–¥–ø–∏—Å–æ–∫ (–Ω–æ–≤—ã–π —à–∞–≥)
    startWsSubscriptionVerifier();

    // ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫
    try {
      await sharedLogger({
        service: config.service_name,
        level: 'info',
        message: 'üöÄ solana_subscriber —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω',
      });
    } catch (_) {}
  } catch (err) {
    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'error',
        message: {
          type: 'startup_failed',
          error: err.message,
        },
      });
    } catch (_) {}
    process.exit(1);
  }
}

/**
 * üõë –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
 */
export async function shutdown() {
  if (shuttingDown) return;
  shuttingDown = true;

  try {
    await stopRedisConsumer();
    await stopAllSubscriptions();
    await closeRpcPool();
    await closePostgres();
    await stopHeartbeat();
    stopWsSubscriptionVerifier();       // üß† –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    await disconnectRedisClient();      // Redis shutdown

    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'info',
        message: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
      });
    } catch (_) {}

    process.exit(0);
  } catch (err) {
    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'error',
        message: {
          type: 'shutdown_failed',
          error: err.message,
        },
      });
    } catch (_) {}

    process.exit(1);
  }
}


/services/solana_subscriber/subscription/maybeTriggerRecovery.js:
// services/solana_subscriber/subscription/maybeTriggerRecovery.js

// ‚úÖ –û–ë–ù–û–í–õ–Å–ù: –¥–æ–±–∞–≤–ª–µ–Ω–∞ TTL –¥–ª—è rateLimitedRpcIds

/**
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (recoverTransactions)
 * –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π WebSocket RPC, –≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (rate limit).
 *
 * –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:
 * –ü—Ä–∏ rate limit-–µ Solana WebSocket –º–æ–∂–µ—Ç "–ø–æ—Ç–µ—Ä—è—Ç—å" —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
 * –ß—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º —Ç–æ—Ç –∂–µ RPC.
 */

import { recoverTransactions } from './recoveryManager.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from '../config/configLoader.js';

/**
 * @typedef {Object} Subscription
 * @property {string} chain_id - –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∞.
 * @property {string} account - –ê–¥—Ä–µ—Å Solana-–∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å.
 * @property {string} rpc_id - ID RPC-–∫–ª–∏–µ–Ω—Ç–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.
 */

/**
 * –•—Ä–∞–Ω–∏–ª–∏—â–µ RPC ID, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –±—ã–ª –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω rate limit, —Å TTL (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏).
 * –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Map, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏.
 */
const rateLimitedRpcIds = new Map();

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –Ω–∞ RPC –±—ã–ª –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç WebSocket-–∑–∞–ø—Ä–æ—Å–æ–≤.
 *
 * @param {string} rpc_id - ID RPC –∫–ª–∏–µ–Ω—Ç–∞, –≥–¥–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏–º–∏—Ç
 * @param {Map<string, Subscription>} activeSubscriptions - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 */
export function maybeTriggerRecovery(rpc_id, activeSubscriptions) {
  const config = getCurrentConfig();

  const cooldownMs = config.recovery_cooldown_ms || 60000; // üîÅ TTL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞)
  const recoveryAgeMs = config.recovery_max_age_ms || 300000; // üïí –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç

  // üß† –£–∂–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç RPC ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (rateLimitedRpcIds.has(rpc_id)) return;

  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ Map —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
  rateLimitedRpcIds.set(rpc_id, Date.now());

  // ‚è≤Ô∏è –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Map —á–µ—Ä–µ–∑ cooldown
  setTimeout(() => {
    rateLimitedRpcIds.delete(rpc_id);
  }, cooldownMs);

  // üîÅ –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∏—â–µ–º —Ç–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–∏–º RPC
  for (const sub of activeSubscriptions.values()) {
    if (sub.rpc_id !== rpc_id) continue;

    const { chain_id, account } = sub;

    try {
      sharedLogger({
        service: config.service_name,
        level: 'info',
        message: {
          type: 'recovery_triggered_due_to_rate_limit',
          chain_id,
          account,
          rpc_id,
        },
      });
    } catch (_) {}

    recoverTransactions({
      chain_id,
      account,
      last_signature: null,
      history_max_age_ms: recoveryAgeMs,
    }).catch(async (err) => {
      try {
        await sharedLogger({
          service: config.service_name,
          level: 'error',
          message: {
            type: 'recovery_failed_after_rate_limit',
            chain_id,
            account,
            rpc_id,
            error: err.message,
          },
        });
      } catch (_) {}
    });
  }
}


/services/solana_subscriber/subscription/onLogsHandler.js:
// services/solana_subscriber/subscription/onLogsHandler.js

// ‚úÖ –ì–û–¢–û–í (–æ–±–Ω–æ–≤–ª—ë–Ω —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä—ã)

/**
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –ª–æ–≥–æ–≤ (onLogs), –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ –ø–æ WebSocket
 * –æ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Solana.
 *
 * –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –¶–µ–ª—å –º–æ–¥—É–ª—è ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:
 * - –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
 * - –≤ –∫–∞–∫—É—é –æ—á–µ—Ä–µ–¥—å –ø–æ–º–µ—Å—Ç–∏—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É
 * - —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ WebSocket RPC (rate limit)
 *
 * –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–∞—Ä—Å–∏–Ω–≥, –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∏ —Ç.–¥.) –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö.
 */

import { enqueueSignature } from '../queue/parseQueue.js';
import { enqueueToPerAccountPublishQueue, isPrioritized } from '../queue/perAccountPublishQueueManager.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { maybeTriggerRecovery } from './maybeTriggerRecovery.js';
import { getCurrentConfig } from '../config/configLoader.js';

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ª–æ–≥–æ–≤ (WebSocket).
 *
 * @param {Object} params - –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @param {string} params.chain_id - –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∞–∫–∫–∞—É–Ω—Ç
 * @param {string} params.account - –ê–¥—Ä–µ—Å –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏—à–ª–∏ –ª–æ–≥–∏
 * @param {string} params.signature - –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (txid)
 * @param {Object} params.rpc - –û–±—ä–µ–∫—Ç RPC-–∫–ª–∏–µ–Ω—Ç–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–ª–æ —Å–æ–±—ã—Ç–∏–µ
 *
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 * - –µ—Å–ª–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
 * - –µ—Å–ª–∏ –ª–∏–º–∏—Ç WebSocket –ø—Ä–µ–≤—ã—à–µ–Ω ‚Äî –ª–æ–≥–∏—Ä—É–µ–º, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ maybeTriggerRecovery
 * - —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –∏ –ø–æ–º–µ—â–∞–µ–º –≤ –Ω—É–∂–Ω—É—é –æ—á–µ—Ä–µ–¥—å:
 *    - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é (–µ—Å–ª–∏ isPrioritized)
 *    - –æ–±—ã—á–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
 * - –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ —É–ø–∞–ª WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
 */
export async function handleLogEvent({ chain_id, account, signature, rpc }) {
  try {
    /**
     * ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—ã:
     * - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
     * - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –º–∏–Ω–∏–º—É–º 80 —Å–∏–º–≤–æ–ª–æ–≤ (—ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
     */
    if (typeof signature !== 'string' || signature.length < 80) return;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const task = {
      chain_id,
      account,
      signature,
      enqueuedAt: Date.now(),
    };

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç WebSocket-–∑–∞–ø—Ä–æ—Å–æ–≤ (rate limit).
     * –ï—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω ‚Äî –Ω–µ —Ç–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ, –∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —ç—Ç–æ–º RPC.
     */
    if (!rpc.wsLimiter.removeToken()) {
      try {
        await sharedLogger({
          service: getCurrentConfig().service_name,
          level: 'warn',
          message: {
            type: 'ws_rate_limited',
            signature,
            chain_id,
            account,
            rpc_id: rpc.id,
          },
        });
      } catch (_) {}

      maybeTriggerRecovery(rpc.id);
      return;
    }

    /**
     * –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø–æ–º–µ—â–∞–µ–º –∑–∞–¥–∞—á—É
     * –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—á–µ—Ä–µ–¥—å:
     * - perAccountQueue ‚Üí –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–æ—Ä–∫–µ—Ä —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
     * - parseQueue ‚Üí –æ–±—â–∞—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    if (isPrioritized(chain_id, account)) {
      enqueueToPerAccountPublishQueue(task);
    } else {
      enqueueSignature(task);
    }

  } catch (err) {
    /**
     * –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
     */
    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'error',
        message: {
          type: 'handle_log_event_failed',
          signature,
          chain_id,
          account,
          error: err.message,
        },
      });
    } catch (_) {}
  }
}


/services/solana_subscriber/subscription/recoveryManager.js:
// services/solana_subscriber/subscription/recoveryManager.js

// ‚úÖ –ì–û–¢–û–í

/**
 * –ú–æ–¥—É–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞–º) –¥–ª—è Solana-–∞–∫–∫–∞—É–Ω—Ç–æ–≤.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏:
 * - —Å—Ç–∞—Ä—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ (`subscribeToAccount`)
 * - —Å–±–æ–µ RPC –∏–ª–∏ reconnect-–µ (`resubscribeAll`)
 * - –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ WebSocket (`maybeTriggerRecovery`)
 *
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
 * - –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ RPC –º–µ—Ç–æ–¥–æ–º `getSignaturesForAddress`
 * - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (`maxAgeMs`) –∏–ª–∏ –ø–æ `last_signature`
 * - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ (limit = 1000), –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º –≤—Å—ë
 * - –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ (`enqueueSignature` –∏–ª–∏ `enqueueToPerAccountQueue`)
 *
 * –í—Å–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ **–æ—Ç —Å—Ç–∞—Ä–æ–π –∫ –Ω–æ–≤–æ–π**, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å.
 */

import { getSignaturesForAddressWithTimeout } from '../rpc/rpcUtils.js';
import { getAvailableRpc } from '../rpc/rpcPool.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { enqueueSignature } from '../queue/parseQueue.js';
import { enqueueToPerAccountPublishQueue, isPrioritized } from '../queue/perAccountPublishQueueManager.js';
import { getCurrentConfig } from '../config/configLoader.js';


/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å–∏–≥–Ω–∞—Ç—É—Ä—ã) –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.
 *
 * @param {Object} params
 * @param {string} params.chain_id - –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ø–æ—á–∫–∏ (chain1, chain2 –∏ —Ç.–ø.)
 * @param {string} params.account - –ê–¥—Ä–µ—Å Solana-–∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∞)
 * @param {string|null} params.last_signature - –°–∏–≥–Ω–∞—Ç—É—Ä–∞, –¥–æ –∫–æ—Ç–æ—Ä–æ–π (–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
 *
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 * - –µ—Å–ª–∏ last_signature = null ‚Üí –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ (`maxAgeMs`)
 * - –µ—Å–ª–∏ last_signature —É–∫–∞–∑–∞–Ω–∞ ‚Üí –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–¥—ë—Ç –¥–æ –Ω–µ—ë, –Ω–µ –≤–∫–ª—é—á–∞—è –µ—ë —Å–∞–º—É
 */
export async function recoverTransactions({ chain_id, account, last_signature }) {
  /**
   * –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π RPC-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞.
   * –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º.
   */
  const rpc = await getAvailableRpc();
  if (!rpc) {
    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'warn',
        message: {
          type: 'recovery_skipped',
          reason: 'no_available_rpc',
          chain_id,
          account,
        },
      });
    } catch (_) {}
    return;
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  try {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'info',
      message: {
        type: 'recovery_started',
        chain_id,
        account,
        rpc_id: rpc.id,
        from: last_signature || 'start',
      },
    });
  } catch (_) {}

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  const allSignatures = [];
  const maxAgeMs = getCurrentConfig().default_history_max_age_ms || 86400000;
  const now = Date.now();

  let before = undefined;
  let keepFetching = true;

  /**
   * üîÅ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏–≥–Ω–∞—Ç—É—Ä
   * Solana –æ—Ç–¥–∞—ë—Ç —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –æ—Ç –ù–û–í–´–• –∫ –°–¢–ê–†–´–ú (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫),
   * –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–æ—Å—Ç–æ `push`, –∞ –≤ –∫–æ–Ω—Ü–µ ‚Äî `reverse()`.
   */
  while (keepFetching) {
    const options = {
      limit: 1000,
      ...(before ? { before } : {}),
      ...(last_signature ? { until: last_signature } : {}),
    };

    const sigs = await getSignaturesForAddressWithTimeout(rpc, account, options);
    if (!sigs || sigs.length === 0) break;

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ
    const confirmed = sigs.filter(sig => sig.confirmationStatus === 'confirmed');

    for (const sig of confirmed) {
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∑–∞–¥–∞–Ω–Ω–æ–π last_signature ‚Üí –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
      if (sig.signature === last_signature) {
        keepFetching = false;
        break;
      }

      // –ï—Å–ª–∏ sig —É—Å—Ç–∞—Ä–µ–ª –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Üí —Ç–æ–∂–µ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
      if (sig.blockTime && sig.blockTime * 1000 < now - maxAgeMs) {
        keepFetching = false;
        break;
      }

      allSignatures.push(sig);
    }

    // –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å –º–µ–Ω—å—à–µ 1000 ‚Äî —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (sigs.length < 1000) break;

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–µ—â—ë –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
    before = sigs[sigs.length - 1].signature;
  }

  /**
   * –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ ‚Äî —Ç–µ–ø–µ—Ä—å –æ—Ç –°–¢–ê–†–û–ô –∫ –ù–û–í–û–ô
   */
  allSignatures.reverse();

  /**
   * –ü–æ–º–µ—â–∞–µ–º –∫–∞–∂–¥—É—é —Å–∏–≥–Ω–∞—Ç—É—Ä—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
   */
  for (const sig of allSignatures) {
    const task = {
      chain_id,
      account,
      signature: sig.signature,
      enqueuedAt: Date.now(),
    };

    if (isPrioritized(chain_id, account)) {
      enqueueToPerAccountPublishQueue(task);
    } else {
      enqueueSignature(task);
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  try {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'info',
      message: {
        type: 'recovery_queued',
        chain_id,
        account,
        count: allSignatures.length,
      },
    });
  } catch (_) {}
}


/services/solana_subscriber/subscription/subscriptionManager.js:
// services/solana_subscriber/subscription/subscriptionManager.js

// ‚úÖ –ì–û–¢–û–í

/**
 * üì° –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç—ã Solana.
 *
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç:
 * - –∑–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 * - –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
 * - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
 * - –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –ª–æ–≥–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
 */

import { getAvailableRpc } from '../rpc/rpcPool.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { handleLogEvent } from './onLogsHandler.js';
import { recoverTransactions } from './recoveryManager.js';

import {
  getLastSignatureForAccount,
  upsertSubscription,
  deactivateSubscription,
} from '../db/subscriptions.js';

import {
  isPrioritized,
  markAccountAsPrioritized,
} from '../queue/perAccountPublishQueueManager.js';

import { sendSubscriptionStateUpdate } from '../utils/subscriptionStatePublisher.js';
import { getCurrentConfig } from '../config/configLoader.js';

// –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: key = `${chain_id}:${account}` ‚Üí {...}
const activeSubscriptions = new Map();

// –§–ª–∞–≥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
const recoveryInProgress = new Map();

// –ë—É—Ñ–µ—Ä –ª–æ–≥–æ–≤, –ø—Ä–∏—à–µ–¥—à–∏—Ö –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
const bufferedSignatures = new Map();

/**
 * üîÅ –°—Ç–∞—Ä—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ –ë–î
 */
export async function startAllSubscriptions(subscriptionList) {
  for (const sub of subscriptionList) {
    await subscribeToAccount({
      chain_id: sub.chain_id,
      account: sub.account,
      last_signature: sub.last_signature,
      priority: sub.priority === true,
    });
  }
}

/**
 * ‚õî –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 */
export async function stopAllSubscriptions() {
  for (const key of activeSubscriptions.keys()) {
    await unsubscribeFromAccount(key);
  }
}

/**
 * üì• –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
 */
export async function subscribeToAccount({
  chain_id,
  account,
  last_signature = null,
  history_max_age_ms,
  priority = false,
}) {
  const key = `${chain_id}:${account}`;

  if (activeSubscriptions.has(key)) return;

  // –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ—Ä–∫–µ—Ä
  if (priority === true) {
    markAccountAsPrioritized(chain_id, account);
  }

  const configHistoryMaxAge = getCurrentConfig().default_history_max_age_ms;
  const effectiveHistoryAge = history_max_age_ms || configHistoryMaxAge;

  // ‚è∫Ô∏è –ó–∞–ø–∏—Å—å –≤ –ë–î
  try {
    await upsertSubscription({
      chain_id,
      account,
      last_signature,
      history_max_age_ms: effectiveHistoryAge,
      priority,
    });
  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'error',
      message: {
        type: 'upsert_subscription_failed',
        chain_id,
        account,
        error: err.message,
      },
    });
    return;
  }

  // üåê RPC WebSocket
  const rpc = await getAvailableRpc();
  if (!rpc) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'warn',
      message: {
        type: 'subscribe_skipped',
        reason: 'no_available_rpc',
        chain_id,
        account,
      },
    });
    return;
  }

  // üßæ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞
  if (!last_signature) {
    last_signature = await getLastSignatureForAccount(chain_id, account);
  }

  recoveryInProgress.set(key, true);
  bufferedSignatures.set(key, []);

  // üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–æ–≥–∏
  const id = rpc.wsConn.onLogs(account, async (logInfo) => {
    if (!logInfo?.signature) return;
    const signature = logInfo.signature;

    if (recoveryInProgress.has(key)) {
      bufferedSignatures.get(key).push(signature);
    } else {
      await handleLogEvent({ chain_id, account, signature, rpc });
    }
  });

  // üíæ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
  activeSubscriptions.set(key, {
    chain_id,
    account,
    rpc_id: rpc.id,
    subscriptionId: id,
    wsConn: rpc.wsConn,
    last_signature,
    history_max_age_ms: effectiveHistoryAge,
  });

  // üì¢ –õ–æ–≥
  await sharedLogger({
    service: getCurrentConfig().service_name,
    level: 'info',
    message: {
      type: 'subscribe',
      chain_id,
      account,
      rpc_id: rpc.id,
      priority,
    },
  });

  // üì° Redis
  try {
    await sendSubscriptionStateUpdate({
      chain_id,
      account,
      active: true,
      connected: true,
    });
  } catch (_) {}

  // ‚èÆÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
  try {
    await recoverTransactions({
      chain_id,
      account,
      last_signature,
      history_max_age_ms: effectiveHistoryAge,
    });
  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'error',
      message: {
        type: 'recovery_failed',
        chain_id,
        account,
        error: err.message,
      },
    });
  }

  // üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
  const buffer = bufferedSignatures.get(key) || [];
  for (const signature of buffer) {
    await handleLogEvent({ chain_id, account, signature, rpc });
  }

  recoveryInProgress.delete(key);
  bufferedSignatures.delete(key);

  await sharedLogger({
    service: getCurrentConfig().service_name,
    level: 'info',
    message: {
      type: 'recovery_finished',
      chain_id,
      account,
      buffered_signatures: buffer.length,
    },
  });
}

/**
 * ‚ùå –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
 */
export async function unsubscribeFromAccount(key) {
  const sub = activeSubscriptions.get(key);
  if (!sub) return;

  try {
    await sub.wsConn.removeOnLogsListener(sub.subscriptionId);
  } catch (err) {
    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'warn',
      message: {
        type: 'unsubscribe_failed',
        error: err.message,
        key,
      },
    });
  }

  activeSubscriptions.delete(key);

  const [chain_id, account] = key.split(':');
  await deactivateSubscription({ chain_id, account });

  await sharedLogger({
    service: getCurrentConfig().service_name,
    level: 'info',
    message: {
      type: 'unsubscribe',
      chain_id,
      account,
      rpc_id: sub.rpc_id,
    },
  });

  try {
    await sendSubscriptionStateUpdate({
      chain_id,
      account,
      active: false,
      connected: false,
    });
  } catch (_) {}
}

/**
 * ‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
 */
export async function resubscribeAll() {
  const oldSubs = Array.from(activeSubscriptions.entries());

  await stopAllSubscriptions();
  await publishAllDisconnected();

  for (const [key, sub] of oldSubs) {
    const { chain_id, account, last_signature } = sub;

    try {
      await subscribeToAccount({
        chain_id,
        account,
        last_signature,
        priority: sub.priority === true,
      });

      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'info',
        message: {
          type: 'resubscribe',
          chain_id,
          account,
        },
      });
    } catch (err) {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'error',
        message: {
          type: 'resubscribe_failed',
          chain_id,
          account,
          error: err.message,
        },
      });
    }
  }
}

/**
 * üîÑ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 */
export async function publishAllDisconnected() {
  for (const key of activeSubscriptions.keys()) {
    const [chain_id, account] = key.split(':');
    try {
      await sendSubscriptionStateUpdate({
        chain_id,
        account,
        active: true,
        connected: false,
      });
    } catch (_) {}
  }
}


/services/solana_subscriber/subscription/subscriptionVerifier.js:
// services/solana_subscriber/subscription/subscriptionVerifier.js

/**
 * üß™ –ú–æ–¥—É–ª—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket-–ø–æ–¥–ø–∏—Å–æ–∫.
 *
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ `activeSubscriptions` —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
 * –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ `_rpcWebSocket._subscriptions` –≤ web3.js.
 *
 * –ï—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ ¬´–æ—Ç–≤–∞–ª–∏–ª–∞—Å—å¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –¥–æ—à—ë–ª event 'close'),
 * —Ç–æ:
 * - –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
 * - –ø—Ä–æ–±—É–µ—Ç –∑–∞–Ω–æ–≤–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
 *
 * üîÅ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 60 —Å–µ–∫—É–Ω–¥),
 * –∑–∞–¥–∞—ë—Ç—Å—è –≤ subscriber_config.subscription_verifier_interval_ms.
 */

import { getCurrentConfig } from '../config/configLoader.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import {
  activeSubscriptions,
  unsubscribeFromAccount,
  subscribeToAccount,
} from './subscriptionManager.js';

let verifierInterval = null;

/**
 * üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫
 */
export function startSubscriptionVerifier() {
  const interval = getCurrentConfig().subscription_verifier_interval_ms || 60000;

  verifierInterval = setInterval(async () => {
    for (const [key, sub] of activeSubscriptions.entries()) {
      const { subscriptionId, wsConn, chain_id, account, rpc_id } = sub;

      // üß† –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ ._subscriptions
      const isStillSubscribed =
        wsConn?._rpcWebSocket?._subscriptions?.has(subscriptionId);

      if (!isStillSubscribed) {
        // ‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ "–æ—Ç–≤–∞–ª–∏–ª–∞—Å—å"
        await sharedLogger({
          service: getCurrentConfig().service_name,
          level: 'warn',
          message: {
            type: 'subscription_missing_in_ws',
            chain_id,
            account,
            subscriptionId,
            rpc_id,
          },
        });

        try {
          // ‚ùå –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π (–µ—Å–ª–∏ –æ–Ω–∞ –æ—Å—Ç–∞–ª–∞—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ)
          await unsubscribeFromAccount(key);

          // ‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
          await subscribeToAccount({
            chain_id,
            account,
            last_signature: sub.last_signature,
            priority: sub.priority,
          });

          // ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'info',
            message: {
              type: 'subscription_recovered_after_ws_missing',
              chain_id,
              account,
              rpc_id,
            },
          });
        } catch (err) {
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'error',
            message: {
              type: 'subscription_recovery_failed',
              chain_id,
              account,
              rpc_id,
              error: err.message,
            },
          });
        }
      }
    }
  }, interval);
}

/**
 * üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export function stopSubscriptionVerifier() {
  if (verifierInterval) {
    clearInterval(verifierInterval);
    verifierInterval = null;
  }
}


/services/solana_subscriber/utils/subscriptionStatePublisher.js:
// ‚úÖ –û–ë–ù–û–í–õ–Å–ù–ù–´–ô

// üì¶ Redis-–∫–ª–∏–µ–Ω—Ç (singleton)
import { getRedisClient } from '../../../utils/redisClientSingleton.js';

// üß† –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
import { sharedLogger } from '../../../utils/sharedLogger.js';

// üì• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤ —Ç–æ–º —á–∏—Å–ª–µ stream_subscription_state)
import { getCurrentConfig } from '../config/configLoader.js';

/**
 * üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ `SUBSCRIPTION_STATE_CHANGED` –≤ Redis Stream.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ UI:
 * - –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
 * - –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞
 * - –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (resubscribeAll)
 *
 * –ü–æ—Ç–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ `subscriber_config.stream_subscription_state`.
 *
 * @param {object} params
 * @param {string} params.chain_id - –ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'chain1')
 * @param {string} params.account - –∞–¥—Ä–µ—Å Solana-–∞–∫–∫–∞—É–Ω—Ç–∞
 * @param {boolean} params.active - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤ –ë–î
 * @param {boolean} params.connected - –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –ª–∏ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 */
export async function sendSubscriptionStateUpdate({ chain_id, account, active, connected }) {
  const service = getCurrentConfig().service_name;
  const STREAM_KEY = getCurrentConfig().stream_subscription_state;

  // üì¶ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = {
    type: 'SUBSCRIPTION_STATE_CHANGED',
    chain_id,
    account,
    active,
    connected,
    timestamp: Date.now(),
  };

  // ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  if (typeof message !== 'object' || message === null) {
    await sharedLogger({
      service,
      level: 'warn',
      message: {
        type: 'subscription_state_publish_skipped',
        reason: 'invalid_message_object',
        message,
      },
    });
    return;
  }

  try {
    const redis = await getRedisClient();

    // üöÄ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis Stream
    await redis.xAdd(STREAM_KEY, '*', {
      data: JSON.stringify(message),
    });

  } catch (err) {
    // ‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º
    try {
      await sharedLogger({
        service,
        level: 'error',
        message: {
          type: 'publish_subscription_state_failed',
          error: err.message,
          account,
          chain_id,
        },
      });
    } catch (_) {}
  }
}

