// services/solana_subscriber/db/db.js

// ‚úÖ –ì–û–¢–û–í

import pg from 'pg';
import promiseRetry from 'promise-retry';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from '../config/configLoader.js';
import { CONFIG } from '../../../utils/config/index.js'; // —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º

// üéØ –°–æ–∑–¥–∞—ë–º –æ–±—â–∏–π –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL
export const pool = new pg.Pool({
  connectionString: CONFIG.db.connectionString,
});

// üß† –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
let isInitialized = false;

/**
 * ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL.
 * 
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 * - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—É–ª
 * - –î–µ–ª–∞–µ—Ç –¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫ (—Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏)
 * - –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
 * - –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ —Ñ–∞—Ç–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–µ
 */
export async function initPostgres() {
  // ‚õî –£–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (isInitialized) return;

  try {
    // üîÅ –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —Ä–µ—Ç—Ä–∞—è–º–∏ (–¥–æ 5 —Ä–∞–∑)
    await promiseRetry(async (retry, attempt) => {
      try {
        const client = await pool.connect(); // üîå –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        client.release(); // üîì –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º

        // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await sharedLogger({
          service: getCurrentConfig().service_name,
          level: 'info',
          message: {
            type: 'postgres_connected',
            message: `–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL (–ø–æ–ø—ã—Ç–∫–∞ #${attempt})`,
          },
        });

        isInitialized = true; // üß† –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ

      } catch (err) {
        // üü° –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É (warning, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        try {
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'warn',
            message: {
              type: 'postgres_connection_attempt_failed',
              attempt,
              error: err.message,
            },
          });
        } catch (_) {}

        retry(err); // üîÅ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
      }
    }, {
      retries: 5,
      minTimeout: 1000,
      maxTimeout: 5000,
    });

  } catch (err) {
    // ‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'error',
        message: {
          type: 'postgres_connection_failed',
          error: err.message,
        },
      });
    } catch (_) {}

    process.exit(1); // ‚õî –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
  }
}

/**
 * üõë –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π PostgreSQL.
 * 
 * –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
 * - –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
 * - –õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
 * - –ë–µ–∑–æ–ø–∞—Å–µ–Ω –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö
 */
export async function closePostgres() {
  // üîï –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–ª–∏—Å—å ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if (!isInitialized) return;

  try {
    await pool.end(); // üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    await sharedLogger({
      service: getCurrentConfig().service_name,
      level: 'info',
      message: {
        type: 'postgres_disconnected',
        message: '–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç PostgreSQL',
      },
    });
  } catch (err) {
    // ‚ö†Ô∏è –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ (—á–µ—Ä–µ–∑ sharedLogger)
    try {
      await sharedLogger({
        service: getCurrentConfig().service_name,
        level: 'warn',
        message: {
          type: 'postgres_disconnect_failed',
          error: err.message,
        },
      });
    } catch (_) {}
  }
}
