// services/solana_subscriber/subscription/maybeTriggerRecovery.js

// ‚úÖ –û–ë–ù–û–í–õ–Å–ù: –¥–æ–±–∞–≤–ª–µ–Ω–∞ TTL –¥–ª—è rateLimitedRpcIds

/**
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (recoverTransactions)
 * –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π WebSocket RPC, –≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ (rate limit).
 *
 * –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ:
 * –ü—Ä–∏ rate limit-–µ Solana WebSocket –º–æ–∂–µ—Ç "–ø–æ—Ç–µ—Ä—è—Ç—å" —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
 * –ß—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å —ç—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∞–∫–∫–∞—É–Ω—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º —Ç–æ—Ç –∂–µ RPC.
 */

import { recoverTransactions } from './recoveryManager.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from '../config/configLoader.js';

/**
 * @typedef {Object} Subscription
 * @property {string} chain_id - –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–¥–ø–∏—Å–∫–∞.
 * @property {string} account - –ê–¥—Ä–µ—Å Solana-–∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å.
 * @property {string} rpc_id - ID RPC-–∫–ª–∏–µ–Ω—Ç–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.
 */

/**
 * –•—Ä–∞–Ω–∏–ª–∏—â–µ RPC ID, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –±—ã–ª –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω rate limit, —Å TTL (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏).
 * –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º Map, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏.
 */
const rateLimitedRpcIds = new Map();

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –Ω–∞ RPC –±—ã–ª –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç WebSocket-–∑–∞–ø—Ä–æ—Å–æ–≤.
 *
 * @param {string} rpc_id - ID RPC –∫–ª–∏–µ–Ω—Ç–∞, –≥–¥–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏–º–∏—Ç
 * @param {Map<string, Subscription>} activeSubscriptions - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
 */
export function maybeTriggerRecovery(rpc_id, activeSubscriptions) {
  const config = getCurrentConfig();

  const cooldownMs = config.recovery_cooldown_ms || 60000; // üîÅ TTL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–Ω—É—Ç–∞)
  const recoveryAgeMs = config.recovery_max_age_ms || 300000; // üïí –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç

  // üß† –£–∂–µ —Ç—Ä–∏–≥–≥–µ—Ä–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç RPC ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (rateLimitedRpcIds.has(rpc_id)) return;

  // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ Map —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
  rateLimitedRpcIds.set(rpc_id, Date.now());

  // ‚è≤Ô∏è –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Map —á–µ—Ä–µ–∑ cooldown
  setTimeout(() => {
    rateLimitedRpcIds.delete(rpc_id);
  }, cooldownMs);

  // üîÅ –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∏—â–µ–º —Ç–µ, —á—Ç–æ —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–∏–º RPC
  for (const sub of activeSubscriptions.values()) {
    if (sub.rpc_id !== rpc_id) continue;

    const { chain_id, account } = sub;

    try {
      sharedLogger({
        service: config.service_name,
        level: 'info',
        message: {
          type: 'recovery_triggered_due_to_rate_limit',
          chain_id,
          account,
          rpc_id,
        },
      });
    } catch (_) {}

    recoverTransactions({
      chain_id,
      account,
      last_signature: null,
      history_max_age_ms: recoveryAgeMs,
    }).catch(async (err) => {
      try {
        await sharedLogger({
          service: config.service_name,
          level: 'error',
          message: {
            type: 'recovery_failed_after_rate_limit',
            chain_id,
            account,
            rpc_id,
            error: err.message,
          },
        });
      } catch (_) {}
    });
  }
}
