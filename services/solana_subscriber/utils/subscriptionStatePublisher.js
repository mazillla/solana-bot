// ‚úÖ –û–ë–ù–û–í–õ–Å–ù–ù–´–ô

// üì¶ Redis-–∫–ª–∏–µ–Ω—Ç (singleton)
import { getRedisClient } from '../../../utils/redisClientSingleton.js';

// üß† –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
import { sharedLogger } from '../../../utils/sharedLogger.js';

// üì• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤ —Ç–æ–º —á–∏—Å–ª–µ stream_subscription_state)
import { getCurrentConfig } from '../config/configLoader.js';

/**
 * üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ `SUBSCRIPTION_STATE_CHANGED` –≤ Redis Stream.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ UI:
 * - –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
 * - –∫–æ–≥–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞
 * - –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (resubscribeAll)
 *
 * –ü–æ—Ç–æ–∫ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ `subscriber_config.stream_subscription_state`.
 *
 * @param {object} params
 * @param {string} params.chain_id - –ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ü–µ–ø–æ—á–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'chain1')
 * @param {string} params.account - –∞–¥—Ä–µ—Å Solana-–∞–∫–∫–∞—É–Ω—Ç–∞
 * @param {boolean} params.active - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –≤ –ë–î
 * @param {boolean} params.connected - –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –ª–∏ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
 */
export async function sendSubscriptionStateUpdate({ chain_id, account, active, connected }) {
  const service = getCurrentConfig().service_name;
  const STREAM_KEY = getCurrentConfig().stream_subscription_state;

  // üì¶ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const message = {
    type: 'SUBSCRIPTION_STATE_CHANGED',
    chain_id,
    account,
    active,
    connected,
    timestamp: Date.now(),
  };

  // ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  if (typeof message !== 'object' || message === null) {
    await sharedLogger({
      service,
      level: 'warn',
      message: {
        type: 'subscription_state_publish_skipped',
        reason: 'invalid_message_object',
        message,
      },
    });
    return;
  }

  try {
    const redis = await getRedisClient();

    // üöÄ –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Redis Stream
    await redis.xAdd(STREAM_KEY, '*', {
      data: JSON.stringify(message),
    });

  } catch (err) {
    // ‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º
    try {
      await sharedLogger({
        service,
        level: 'error',
        message: {
          type: 'publish_subscription_state_failed',
          error: err.message,
          account,
          chain_id,
        },
      });
    } catch (_) {}
  }
}
