import { createClient } from "redis";
import { logger } from "../utils/logger.js";
import { sendToRedisBuffer } from "../utils/redis_buffer.js";
import dotenv from "dotenv";

dotenv.config();

const redisClient = createClient();
await redisClient.connect();

// üìå **–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –ø–∞–¥–∞–ª**
process.on("uncaughtException", (err) => {
    logger.error(`[‚ùå] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
});

process.on("unhandledRejection", (reason, promise) => {
    logger.error(`[‚ùå] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –≤ –ø—Ä–æ–º–∏—Å–µ: ${reason}`);
});

console.log("[‚úÖ] Log Processor –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è Solana...");

// üìå **–°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ Redis Streams**
async function processLogMessages() {
    while (true) {
        try {
            const messages = await redisClient.xReadGroup('solana_logs_stream_group', 'log_processor', [{ key: 'solana_logs_stream', id: '>' }], { COUNT: 10, BLOCK: 5000 });
            if (!messages) continue;

            for (const message of messages[0].messages) {
                try {
                    const { chain_id, account, log } = JSON.parse(message.message.message);
                    logger.info(`[üì©] –õ–æ–≥ –ø–æ–ª—É—á–µ–Ω: Chain: ${chain_id} | Account: ${account} | Tx: ${log.signature}`);
                    await redisClient.xAck('solana_logs_stream', 'solana_logs_stream_group', message.id);
                } catch (error) {
                    logger.error("[‚ùå] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∞:", error.message);
                }
            }
        } catch (error) {
            logger.error("[‚ùå] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis Streams:", error.message);
        }
    }
}

processLogMessages();
