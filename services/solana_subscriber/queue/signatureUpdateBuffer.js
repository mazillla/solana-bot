// services/solana_subscriber/queue/signatureUpdateBuffer.js

// ‚úÖ –ì–û–¢–û–í

/**
 * –ú–æ–¥—É–ª—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é `last_signature` –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤–æ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å `updateLastSignature(...)` ‚Äî
 * –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å–±–æ—è PostgreSQL.
 *
 * –ó–∞–¥–∞—á–∏ –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è ‚Äî –æ–Ω–∏ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –±—É—Ñ–µ—Ä, –∏ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞.
 */

import { updateLastSignature } from '../db/subscriptions.js';
import { sharedLogger } from '../../../utils/sharedLogger.js';
import { getCurrentConfig } from '../config/configLoader.js';

// üì¶ –ë—É—Ñ–µ—Ä –∑–∞–¥–∞—á: key = `${chain_id}:${account}` ‚Üí signature
const bufferMap = new Map();

// üö© –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤–æ—Ä–∫–µ—Ä–∞
let isRunning = false;

// üîî –°–∏–≥–Ω–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º "–æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"
let notifyResolve = null;

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –≤ –±—É—Ñ–µ—Ä.
 * –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ.
 * –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –∂–¥—ë—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É ‚Äî —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏.
 */
export function setPendingUpdate(chain_id, account, signature) {
  const key = `${chain_id}:${account}`;
  bufferMap.set(key, signature);

  // –ï—Å–ª–∏ –≤–æ—Ä–∫–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –±—É–¥–∏–º –µ–≥–æ
  if (notifyResolve) {
    notifyResolve();
    notifyResolve = null;
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
  if (!isRunning) {
    startSignatureUpdateWorker();
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∑–∞–ø—É—â–µ–Ω.
 * –í–æ—Ä–∫–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –ø–æ–∫–∞ alive.
 */
export function startSignatureUpdateWorker() {
  if (isRunning) return;
  isRunning = true;
  loop();
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞.
 *
 * –õ–æ–≥–∏–∫–∞:
 * - –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç ‚Äî –≤–æ—Ä–∫–µ—Ä "—Å–ø–∏—Ç", –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ (await Promise)
 * - –µ—Å–ª–∏ –≤ –±—É—Ñ–µ—Ä–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ ‚Äî –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∏—Ö –∏ –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å `last_signature`
 * - –ø—Ä–∏ —É—Å–ø–µ—Ö–µ ‚Äî —É–¥–∞–ª—è–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞
 * - –ø—Ä–∏ –æ—à–∏–±–∫–µ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
 */
async function loop() {
  while (isRunning) {
    const entries = Array.from(bufferMap.entries());

    // üí§ –ï—Å–ª–∏ –±—É—Ñ–µ—Ä –ø—É—Å—Ç ‚Äî –∂–¥—ë–º –ø—Ä–∏—Ö–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    if (entries.length === 0) {
      await new Promise(resolve => (notifyResolve = resolve));
      continue;
    }

    // üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –≤ –±—É—Ñ–µ—Ä–µ
    for (const [key, signature] of entries) {
      const [chain_id, account] = key.split(':');

      try {
        // ‚¨ÜÔ∏è –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å last_signature –≤ –±–∞–∑–µ
        await updateLastSignature(chain_id, account, signature);

        // ‚úÖ –£—Å–ø–µ—à–Ω–æ ‚Äî —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±—É—Ñ–µ—Ä–∞
        bufferMap.delete(key);

        try {
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'info',
            message: {
              type: 'signature_updated',
              chain_id,
              account,
              signature,
            },
          });
        } catch (_) {}

      } catch (err) {
        // ‚ö†Ô∏è –û—à–∏–±–∫–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±—É—Ñ–µ—Ä–µ –∏ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        try {
          await sharedLogger({
            service: getCurrentConfig().service_name,
            level: 'warn',
            message: {
              type: 'signature_sync_failed',
              chain_id,
              account,
              signature,
              error: err.message,
            },
          });
        } catch (_) {}
      }
    }

    // üîÅ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É: –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –±—É–¥–µ—Ç –ø—É—Å—Ç ‚Äî —Å–Ω–æ–≤–∞ –∂–¥—ë–º –∑–∞–¥–∞—á—É
  }
}
