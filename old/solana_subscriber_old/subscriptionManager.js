import { logger } from "./utils/logger.js";

// üìå **–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –ø–∞–¥–∞–ª**
process.on("uncaughtException", (err) => {
    logger.error(`[‚ùå] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
});

process.on("unhandledRejection", (reason, promise) => {
    logger.error(`[‚ùå] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–∫–∞–∑ –≤ –ø—Ä–æ–º–∏—Å–µ: ${reason}`);
});

// –ö—ç—à –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ø–∞–º—è—Ç–∏
let subscriptions = new Map(); // { chain_id: { address: subscription_id } }
let newWebSocketTransactions = new Set(); // –ö—ç—à –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

// üìå **–§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ª–æ–≥–∏ Solana**
export async function subscribeToLogs(connection, chain_id, accounts, redisClient, activeSubscriptions, isRecoveringWebsocket) {
    if (!activeSubscriptions.has(chain_id)) {
        activeSubscriptions.set(chain_id, new Map());
    }

    const chainSubscriptions = activeSubscriptions.get(chain_id);

    for (const account of accounts) {
        if (!chainSubscriptions.has(account)) {
            try {
                const id = connection.onLogs(
                    new PublicKey(account),
                    (logInfo) => {
                        if (!isRecoveringWebsocket) {
                            sendToRedisBuffer(`solana_logs_${chain_id}`, { chain_id, account, log: logInfo });
                        } else {
                            newWebSocketTransactions.add(logInfo);
                        }
                    },
                    "confirmed"
                );
                chainSubscriptions.set(account, id);
                logger.info(`[‚úÖ] –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ ${account} –¥–ª—è ${chain_id}`);
            } catch (error) {
                logger.error(`[‚ùå] –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${account}: ${error.message}`);
            }
        }
    }
}

// üìå **–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –ª–æ–≥–æ–≤ Solana**
export async function unsubscribeFromLogs(connection, chain_id, accounts, activeSubscriptions) {
    if (!activeSubscriptions.has(chain_id)) return;
    
    const chainSubscriptions = activeSubscriptions.get(chain_id);

    for (const account of accounts) {
        if (chainSubscriptions.has(account)) {
            try {
                const subscriptionId = chainSubscriptions.get(account);
                connection.removeOnLogsListener(subscriptionId); // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ WebSocket
                chainSubscriptions.delete(account); // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                logger.info(`[‚ùå] –û—Ç–ø–∏—Å–∞–Ω –æ—Ç ${account} –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ ${chain_id}`);
            } catch (error) {
                logger.error(`[‚ùå] –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ ${account}: ${error.message}`);
            }
        }
    }
}
