// tests/integration/solana_subscriber/I1.test.js
import { describe, it, expect, vi, beforeEach } from 'vitest';

describe('I1 ‚Äî update_config —á–µ—Ä–µ–∑ Redis ‚Üí –≤—ã–∑—ã–≤–∞–µ—Ç updateAndReloadConfig + resubscribeAll', () => {
  beforeEach(() => {
    vi.resetModules();
    vi.clearAllMocks();
  });

  it('–≤—ã–∑—ã–≤–∞–µ—Ç updateAndReloadConfig –∏ resubscribeAll', async () => {
    // üß™ –ú–æ–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –≤ handleUpdateConfigCommand
    const updateAndReloadConfig = vi.fn().mockResolvedValue({});
    const resubscribeAll = vi.fn().mockResolvedValue();

    vi.doMock('@/services/solana_subscriber/config/configLoader.js', () => ({
      updateAndReloadConfig,
    }));

    vi.doMock('@/services/solana_subscriber/subscription/subscriptionManager.js', () => ({
      resubscribeAll,
    }));

    // üß™ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º handleUpdateConfigCommand —Å —É–∂–µ –∑–∞–º–æ–∫–∞–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏
    const { handleUpdateConfigCommand } = await import('@/services/solana_subscriber/config/redisConsumer.js');

    await handleUpdateConfigCommand();

    expect(updateAndReloadConfig).toHaveBeenCalledTimes(1);
    expect(resubscribeAll).toHaveBeenCalledTimes(1);
  });
});
